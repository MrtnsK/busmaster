/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file      HashDefines.h
 * @author    Amarnath Shastry, Amitesh Bharti
 * @copyright Copyright (c) 2011, Robert Bosch Engineering and Business Solutions. All rights reserved.
 */

#pragma once

#define DATA_FMT_INTEL          1

#include "Include/BaseDefs.h"
#include "J1939DriverDefines.h"
#include <list>
#include <map>
enum eDLLHANDLER
{
    DLL_LOAD = 0,
    DLL_UNLOAD
};

//The structure to store message and hmodule for the messages
//transmitted from a DLL
struct sDLL_MSG
{
    void* sRxMsg;
    HMODULE h_DllHandle;
};
typedef sDLL_MSG SDLL_MSG;
typedef SDLL_MSG* PSDLL_MSG;

struct sTHREAD_INFO
{
    HANDLE m_hThread;
    VOID*  m_pvThread;
};
typedef sTHREAD_INFO  STHREADINFO;
typedef sTHREAD_INFO* PTHREADINFO;


#define SPLT_ONE_ROWS   1
#define SPLT_ONE_COLS   2

#define SPLT_TWO_ROWS   2
#define SPLT_TWO_COLS   1

#define GCC_EXTREN                  __cdecl extern "C"              //gcc c++ compiler export
#define GCC_EXPORT                  __declspec(dllexport)           //gcc c++ compiler export
#define defGCC_EXTERN               "GCC_EXTERN"
#define defGCC_EXPORT               "GCC_EXPORT"
#define BUS_FN_HDR           _T("/* Start PLACE_HODLER_FOR_BUSNAME generated function - \
PLACE_HODLER_FOR_FUNCTIONNAME */")

#define BUS_FN_FOOTER        _T("}/* End PLACE_HODLER_FOR_BUSNAME generated function - \
PLACE_HODLER_FOR_FUNCTIONNAME */")

#define EDITOR_BUS_FN_FOOTER        _T("/* End PLACE_HODLER_FOR_BUSNAME generated function - \
PLACE_HODLER_FOR_FUNCTIONNAME */")
#define FRAME_FN_PARTIAL_HDR   _T("/* Start PLACE_HODLER_FOR_BUSNAME generated function - ")
#define FRAME_FN_PARTIAL_FTR   _T("/* End PLACE_HODLER_FOR_BUSNAME generated function - ")

#define BUS_VAR_HDR          _T("/* Start PLACE_HODLER_FOR_BUSNAME global variable */")
#define BUS_VAR_FOOTER       _T("/* End PLACE_HODLER_FOR_BUSNAME global variable */")

#define BUS_INCLUDE_HDR      _T("/* Start PLACE_HODLER_FOR_BUSNAME include header */")
#define BUS_INCLUDE_FOOTER   _T("/* End PLACE_HODLER_FOR_BUSNAME include header */")

#define BUS_FN_PROTOTYPE_HDR _T("/* Start PLACE_HODLER_FOR_BUSNAME Function Prototype  */")
#define BUS_FN_PROTOTYPE_FOOTER   _T("/* End PLACE_HODLER_FOR_BUSNAME Function Prototype  */")


#define BUS_FN_WRAPPER_PROTOTYPE_HDR    _T("/* Start PLACE_HODLER_FOR_BUSNAME Function Wrapper Prototype  */")
#define BUS_FN_WRAPPER_PROTOTYPE_FOOTER   _T("/* End PLACE_HODLER_FOR_BUSNAME Function Wrapper Prototype  */")

#define COPYWRITE_INFORMATION _T("/* This file is generated by BUSMASTER */")
#define C_FILE_VERSION          _T("\n/* VERSION [PLACE_HOLDER_FOR_C_FILE_VERSION] */")
#define C_FILE_VERSION_VALUE     _T("1.2")
#define VERSION_TAG              _T("VERSION [")
#define BUSMASTER_VERSION           _T("\n/* BUSMASTER VERSION [PLACE_HOLDER_FOR_BUSMASTER_VERSION] */")
#define BUSMASTER_VERSION_TAG       _T("BUSMASTER VERSION")
#define PROTOCOL                _T("\n/* PROTOCOL [PLACE_HOLDER_FOR_PROTOCOL_VALUE] */")
#define PROTOCOL_TAB            _T("PROTOCOL")
#define DATABASE_PROTOCOL_CAN   _T("CAN")
#define DATABASE_PROTOCOL_J1939 _T("J1939")
#define DATABASE_PROTOCOL_LIN   _T("LIN")
#define UTILS_PREFIX            _T("Utils_")
#define OPEN_PARENTHESIS        _T("(")
#define NO_OF_CHAR_IN_UTILS     6

#define GLOBAL_VAR_PREFIX         _T("g_")
#define MIN_CHAR_IN_GLOBAL_VAR    2
#define FILENAME_NOT_FOUND        _T("File not found!")

#define defDOT_C                    _T(".C")
#define defDOT_CPP                  _T(".cpp")
#define defDOT_DEF                  _T(".def")
#define defDOT_EXP                  _T(".exp")
#define defDOT_DLL                  _T(".dll")

#define MESSAGE_HANDLERS  _T("Message Handlers")
#define POC_HANDLERS  _T("POC Handlers")
#define STARTCYCLE_HANDLERS  _T("Start Cycle Handlers")
#define PDU_HANDLERS       _T("PDU Handlers")
#define TIMER_HANDLERS    _T("Timer Handlers")
#define KEY_HANDLERS      _T("Key Handlers")
#define ERROR_HANDLERS    _T("Error Handlers")
#define EVENTIND_HANDLERS _T("Event Handlers")
#define DLL_HANDLERS      _T("DLL Handlers")
#define UTILITY_FUNCS     _T("Utility Functions")
#define GLOBAL_VARIABLES  _T("Global Variables")
#define INCLUDE_HEADERS   _T("Include Headers")
#define BUSEVENT_HANDLERS _T("Bus Events")

#define SPACE                   _T(' ')
#define SEMI_COLON              _T(';')
#define defDEFAULT_KEY_HANDLER_CODE _T("void OnKey_KEYNAME(unsigned char KeyValue)")


/*#define defDEFAULT_TIMER_HANDLER_CODE   _T("void __stdcall OnTimer_TIMERNAME_TIMERVALUE(unsigned int uTimerID,\
unsigned int uMsg, unsigned long dwUser, unsigned long dw1, unsigned long dw2)")*/
#define defDEFAULT_TIMER_HANDLER_CODE _T("void OnTimer_TIMERNAME_TIMERVALUE( )")

#define defTODO_FUNCTION_INSERT     _T("/* TODO: Define and Initialise the following variables*/")
#define defNEW_LINE                 _T("\n")
#define defRETURN_TYPE_NAME         _T("ReturnValue")
#define defPARAMETER_NAME           _T("Para%d")
#define defTODO                     _T("/* TODO */")
#define defMSG_DUPL_MSG_HANDLER     _T("Message handler for TYPE MESSAGENAME already exists!")
#define defMSG_DUPL_CYCLE_HANDLER     _T("Cycle handler for %s already exists!")
#define defMSG_DUPL_PDU_HANDLER     _T("PDU handler for %s already exists!")
#define defDUPL_CORR_MSG_HANDLER     _T("Corresponding Message handler for TYPE \"MESSAGENAME\" already exists!")

#define defMSG_DUPL_TMR_HANDLER     _T("Timer handler already exists!")
#define defMSG_DUPL_KEY_HANDLER     _T("Key handler for the key \"KEYNAME\" already exists!")
#define defMSG_DUPL_UTIL_FUNC       _T("Utility function \"FUNCTIONNAME\" already exists!")
#define defMSG_DUPL_GLO_VAR         _T("Global variable is already defined!")
#define defINIT_HANDLER_STRUCT_MSG  _T("Unable to initialise handler functions for execution.")
#define defDLL_UNLOADED_MSG         _T("The DLL \"FILENAME\" is unloaded")
#define defOBJECT_BUILDPROGRAM_MSG  _T("Unable to allocate memory for BuildProgram module")
#define defSTRMSG_RANGE_EMPTY       _T("Please Enter Message Range!")
#define defSTRMSG_RANGE_INVALID     _T("Message ID range:\"FROM\" field has value greater then or equal to \"TO\" field")
#define defSTRMSG_ID_INVALID     _T("Please Enter Message ID!")
#define defMESSAGE_HANDLER         _T("OnMsg")
#define defPGN_HANDLER             _T("OnPGN")

#define defONMSG_HANDLER         _T("OnMsg")

#define defKEY_HANDLER             _T("OnKey_")
#define defCON_IND_HANDLER         _T("OnConnectionInd_")
#define defTIMER_HANDLER           _T("OnTimer_")
#define defERROR_HANDLER_FN        _T("OnError_")
#define defDLL_HANDLER_FN          _T("OnDLL_")
#define defBUSEVE_HANDLER_FN       _T("OnBus_")     //Venkatanarayana
#define defEVENT_IND_HANDLER       _T("OnEvent_")
#define defUTILS_FUNCTION_FN       _T("Utils_")
#define defMSG_NAME_HANDLER        _T("Name_")
#define defMSG_ID_HANDLER           _T("ID_")
#define defMSG_WRAPPER_TAG          _T("_Wrapper")

#define defMSG_FLX_ID_HANDLER      _T("")

#define defMSG_ALL                 _T("_All")
#define defMSG_IDRANGE_HANDLER     _T("IDRange_")
#define defMSG_IDLIST_HANDLER      _T("IDList_")
#define defMSGID_NAME_START_CHAR   '['
#define defERR_CHECKSUM_HANDLER_FN _T("OnError_Checksum")
#define defERR_RX_FRM_HANDLER_FN   _T("OnError_Receive_Frame")
#define defERR_SLAVENOANS_HANDLER_FN _T("OnError_Slave_No_Response")
#define defERR_SYNC_HANDLER_FN _T("OnError_Sync")

#define WM_LOAD_UNLOAD              (WM_USER + 39) //If you are changing this change in McNet/CommonDefs.h accordingly
// Prefix of a handler
#define HANDLER_PRFX_DLL           _T("OnDLL_")

// Suffix of a handler
#define HANDLER_SFX_LOADDLL        _T("Load")
#define HANDLER_SFX_UNLOADDLL      _T("Unload")

// Function Editor
#define defCONFIRM_DELETE_HANDLER   _T("You are about to delete the function FUNCTION_NAME(...).\n\
Are you sure you want to delete?")

#define defVOID                     _T("void")
#define defCONFIRM_DELETE_GLOVAR    _T("You are about to delete the variable.\n\
Do you wish to proceed?")

#define defCONFIRM_DELETE_INCHDR    _T("You are about to delete the #include.\n\
Are you sure you want to delete?")
#define defCONFIRM_RELOAD_FILE    _T("This file has been modified by another program.\nDo you want to reload it?")
#define defDEFAULT_MSG_HANDLER_WRAPPER_CODE     _T("void %s(%s RxMsg)")
#define defDEFAULT_PDU_HANDLER_WRAPPER_CODE     _T("void %s(%s RxMsg)")
#define defDEFAULT_MSG_HANDLER_CODE     _T("void %s%s(%s* RxMsg)")
#define defDEFAULT_MSG_HANDLER_CODE_CAN _T("void %s%s(%s RxMsg)")
#define defDEFAULT_KEY_HANDLER_CODE _T("void OnKey_KEYNAME(unsigned char KeyValue)")
#define defDEFAULT_STARTCYCLE_HANDLER_CODE _T("void CYCLENAME(STFLX_STARTCYCLE stcStartCycle)")
#define defDEFAULT_PDU_HANDLER_CODE _T("void OnPDUName_%s(%s RxMsg)")
#define defDEFAULT_PDU_HANDLER_FN_CALL _T("{ OnPDUName_%s(&RxMsg); }")
#define DEFDEFAULT_PDU_HANDLER_CODE_WRAPPER _T("void OnPDUName_%s_Wrapper(STFLX_PDU RxMsg)")
#define defDEFAULT_PDU_ALL_HANDLER_CODE _T("void OnPDU_All(STFLX_PDU RxMsg)")
#define defDEFAULT_POC_HANDLER_CODE _T("void OnPOCState(STFLX_POCSTATUS RxMsg)")
#define defDEFAULT_CON_IND_CODE     _T("void %s( )")
#define defDEFAULT_TIMER_HANDLER_CODE _T("void OnTimer_TIMERNAME_TIMERVALUE( )")

#define defMSGHANDLER_FUNCTION _T("{ %s(&RxMsg); }")
#define defERROR_HANDLER_NUMBER  5
#define defERROR_HANDLER_NUMBER_LIN  4
#define defDLL_HANDLER_NUMBER    2
#define defBUSEV_HANDLER_NUMBER    3
#define defERROR_HANDLER_TEXT_ADD _T("Add Error Handler(s)")
#define defERROR_HANDLER_TEXT_DEL _T("Delete Error Handler(s)")
#define defDLL_HANDLER_TEXT_ADD   _T("Add DLL Handler(s)")
#define defDLL_HANDLER_TEXT_DEL   _T("Delete DLL Handler(s)")
#define defBUSEV_HANDLER_TEXT_DEL   _T("Delete Bus Events Handler(s)")
#define defBUSEV_HANDLER_TEXT_ADD   _T("Add Bus Events Handler(s)")
#define defGENERIC_KEY            _T('*')
#define defGENERIC_KEY_HANDLER_TEXT  _T("All")

#define defSTR_FUNCTION_NAME _T("%*s %[a-zA-Z0-9_] (%*s)")

// Signal Type
#define defBOOLEAN          _T("bool")
#define defUNSIGNED_INT     _T("unsigned int")
#define defUNSIGNED_CHAR    _T("unsigned char")
#define defUNSIGNED_LONG    _T("unsigned long")
#define defUNSIGNED_SHORT   _T("unsigned short")
#define defSIGNED_SHORT     _T("short")
#define defSIGNED_CHAR      _T("char")
#define defSIGNED_INT       _T("int")
#define defSIGNED_LONG      _T("long")
#define defFLOAT            _T("float")

#define defMSG_NAME_TEXT        _T("message name")
#define defMSG_ID_TEXT          _T("message id")
#define defMSG_IDLIST_TEXT          _T("message id list")
#define defMSG_IDRANGE_TEXT     _T("message id range")
#define defMSG_ALL_TEXT         _T("all")
#define defMSG_HANDLER_ARG_TYPE1  _T("void*")
#define defCANMSG_HANDLER_ARG_TYPE  _T("STCAN_MSG")
#define defSTR_MSG_SPECIFIC_HANDLER _T("Name_")
#define defSTR_PDU_ALL_HANDLER _T("OnPDU_All")
#define defMESSAGE_NAME_INDEX       5
#define defCHAR_EQUALS           '='
#define defFNS_COMMA             _T(",")
#define defFNS_INIT_FORMAT       _T("%s %s %s")
#define defFNS_INIT_SIG_FORMAT   _T("%s\n\n%s.%s")
#define defFNS_INIT_VAL          _T(" 0")
#define defSPACE_STR            _T(" ")
#define defMSG_INIT_FORMAT_CAN       _T("= { 0x%X, %d, %d, %d, %d")
#define defMSG_INIT_FORMAT_MCNET       _T("= { %d, 0x%X, %d, %d, %d, %d")
#define defMSG_INIT_FORMAT_J1939       _T("= { {%d, %c, %s, %s, 0x%X}, %d")
#define defMSG_INIT_FORMAT_LIN      _T("= { %d, %d, 0x%X,  0x%X")
const std::string defST_MSG_ID("m_unMsgID");
const std::string defST_EXT_ID("m_ucEXTENDED");
const std::string defST_RTR("m_ucRTR");
const std::string defST_DLC("m_ucDLC");
const std::string defST_CHANNEL("m_ucChannel");
const std::string defST_WHICH_BIT("m_sWhichBit.");
const std::string defST_CANFD("m_bCANFD");
const std::string defST_BYTEDATA("m_aucData");
const std::string defST_WORDDATA("m_auwData");
const std::string defST_LONGDATA("m_aulData");

const std::string defDB_MSG_ID("id");
const std::string defDB_EXT_ID("isExtended");
const std::string defDB_RTR("isRtr");
const std::string defDB_DLC("dlc");
const std::string defDB_CHANNEL("cluster");
const std::string defDB_CANFD("isCanfd");
const std::string defDB_BYTEDATA("byteAt");
const std::string defDB_WORDDATA("wordAt");
const std::string defDB_LONGDATA("longAt");
const std::string defDB_DATA("data");

#define defMSG_TYPECAST_CODE    _T("%s *pMsg = (%s*) RxMsg;")

#define MSG_RET_TYPE_EMPTY      _T("Please select the return type for the function.")

enum eSELTYPE
{
    SEL_MESSAGE = 0,
    SEL_PDU,
    SEL_SIGNAL,
    SEL_GLOBAL_MESSAGE,
    SEL_TOTAL
};
const std::string g_strArrWindowText[SEL_TOTAL] =
{
    "Select Message List",
    "Select Pdu List",
    "Select Signal List",
    "Message Variable List",
};

#define defNUMBER_OF_TIMER           100
#define defFNS_INIT_SIG_FORMAT              _T("%s\n\n%s.%s")
#define defHASHINCLUDE                      _T("#include ")
#define defSIGNALMEMBER                     _T("m_sWhichBit")
#define defUNDERSCORE                       _T("_")
#define MSG_STRUCT_VAR                      _T("sMsgStruct")
#define PERIOD                              _T('.')
#define NEW_LINE                            _T("\n")
#define TVOID                               _T("void")
#define defMSG_DUP_TIMER_HANDLER            _T("Duplicate timer handler name!")
#define defMSG_N0_MORE_CYC                  _T("No more Cycle Handlers can be Added!")
#define defTIMER_FN_NAME                    _T("OnTimer_TIMERNAME_TIMERVALUE")
/*#define defDEFAULT_TIMER_HANDLER_CODE   _T("void __stdcall OnTimer_TIMERNAME_TIMERVALUE(unsigned int uTimerID,\
unsigned int uMsg, unsigned long dwUser, unsigned long dw1, unsigned long dw2)")*/
#define defDEFAULT_TIMER_HANDLER_CODE       _T("void OnTimer_TIMERNAME_TIMERVALUE( )")
#define STR_EMPTY                           _T("")
#define STR_INCLUDE_FILE                    _T("\n#include <%s>")


//no. of entries in CExecute func message handler buffer
#define defMAX_FUNC_MSG                     1000
//no. of entries in global message handler structure buffer
#define defMAX_HMODULE_MSG                  1000
#define defCONFIG_FILE_LOADING              0
#define defCONFIG_FILE_SAVING               1
#define defCONFIG_FILE_NEW                  2


#define defSIMVALIDEXTN        _T(".sim")
#define defDOT_SMALL_C         _T(".c")
#define defDOT_SMALL_CPP       _T(".cpp")
#define defDOT                 _T('.')

//Parameters for the CEvent objects array used in CExecuteFunc
#define defEVENT_EXFUNC_TOTAL        7
//define for CExecute utility thread
#define defKEY_HANDLER_THREAD        0
#define defERROR_HANDLER_THREAD      1
#define defDLL_LOAD_HANDLER_THREAD   2
#define defDLL_UNLOAD_HANDLER_THREAD 3
#define defMSG_HANDLER_THREAD        4
#define defEVENT_HANDLER_THREAD      5
#define defBUSEVENT_HANDLER_THREAD      6


#define NAME_BUS                     _T("CAN Bus")
#define defERROR_IN_REGISTRY         _T("Unable to obtain path of GCC from registry key")
#define defERROR_OPEN_REGISTRY       _T("The registry value is corrupted. Please re-install.")
#define defERROR_OPEN_REGISTRY_FN    _T("The registry value is corrupted. The interface function is not available.\nPlease re-install.")
#define defIMPORT_DLLLOAD_WARNNING   _T("Please Unload all the Dlls and try again")
#define defERROR_DELETE_DLL          _T("%s is in use, Please Unload and try again.")

struct sTCAN_TIME_MSG
{
    UINT  m_unMsgID;     // 11/29 Bit-
    UCHAR m_ucEXTENDED; // true, for (29 Bit) Frame
    UCHAR m_ucRTR;      // true, for remote request
    UCHAR m_ucDataLen;  // Data len (0..64)
    UCHAR m_ucChannel;
    UCHAR m_ucData[64];  // Databytes 0..63
    ULONG m_ulTimeStamp;
    bool  m_bCANFD;     // bool indicates CAN FD message or not
};
typedef sTCAN_TIME_MSG STCAN_TIME_MSG;
typedef sTCAN_TIME_MSG* PSTCAN_TIME_MSG;

class J1939Id
{
public:
    unsigned int   extendedId;  // 29bit id = 3bit priority, 18bit PGN, 8bit Source Address
    // 18bit PGN = 1bit reserved, 1 bit datapage, 8bit pdu format, 8 bit pdu specific
    void operator=(unsigned int extendid)
    {
        extendedId = extendid;
    }

    operator unsigned int()
    {
        return extendedId;
    }


    void setExtendedId(unsigned int _extendedId)
    {
        extendedId = _extendedId;
    }

    void setSourceAddress(unsigned char _sourceAddress)
    {
        extendedId = (extendedId & 0xFFFFFF00) | _sourceAddress;
    }

    void setPGN(unsigned int _pgn)
    {
        // 11100000000000000000011111111

        unsigned int pduFormat = _pgn >> 8;

        unsigned int pgn;
        _pgn = _pgn << 8; // MOVE to the pgn position
        pgn = (extendedId & 0x1C0000FF);
        extendedId = (extendedId & 0x1C0000FF) | _pgn;
    }

    void setPDUFormat(unsigned char _pduFormat)
    {
        // 11111000000001111111111111111
        unsigned int pduformat = _pduFormat;
        pduformat = pduformat << 16; // MOVE to the pduformat position
        extendedId = (extendedId & 0x1F00FFFF) | pduformat;
    }

    void setDataPage(unsigned char _dataPage)
    {
        // 29bit id = 3bit priority, 18bit PGN, 8bit Source Address
        // 18bit PGN = 1bit reserved, 1 bit datapage, 8bit pdu format, 8 bit pdu specific
        // 11110111111111111111111111111
        unsigned int dataPage = _dataPage;
        //pduformat = (extendedId & 0x1F00FFFF);
        dataPage = dataPage << 24; // MOVE to the datapage position
        extendedId = (extendedId & 0x1EFFFFFF) | dataPage;

    }

    void setPriority(unsigned char _priority)
    {
        unsigned int priority = _priority;
        //pduformat = (extendedId & 0x1F00FFFF);
        priority = priority << 26; // MOVE to the datapage position
        extendedId = (extendedId & 0x3FFFFFF) | priority;
    }

    void setPduSpecific(unsigned char _pduSpecific)
    {
        //11111111111110000000011111111
        unsigned int pduspecific = _pduSpecific;
        //pduformat = (extendedId & 0x1F00FFFF);
        pduspecific = pduspecific << 8; // MOVE to the datapage position
        extendedId = (extendedId & 0x1FFF00FF) | pduspecific;
    }

    unsigned int getExtendedId()
    {
        return extendedId;
    }

    unsigned char getSourceAddress()
    {
        // 29bit id = 3bit priority, 18bit PGN, 8bit Source Address
        // 18bit PGN = 1bit reserved, 1 bit datapage, 8bit pdu format, 8 bit pdu specific

        unsigned char srcAddress = extendedId & 0xFF;
        return srcAddress;
    }

    unsigned int getPGN()
    {
        unsigned int pgn = 0;
        if (getPduFormat() < 240)
        {
            pgn = extendedId & 0x3FF00FF; // excluding priority 3 bits
            pgn = (pgn >> 8); // excluding 8bit Source Address //and 8 bit Pdu Specific
        }
        else
        {
            // if canid is 0x1CEAA6FD then PGN is EA and pdu specific is A6
            pgn = extendedId & 0x3FFFFFF; // excluding priority 3 bits
            pgn = pgn >> 8; // excluding 8bit Source Address //and 8 bit Pdu Specific
        }

        return pgn;
    }

    unsigned char getPduFormat()
    {
        unsigned int pgn = extendedId & 0x3FFFFFF;// excluding priority 3 bits
        unsigned char resultPgn = static_cast<unsigned char>((pgn >> 16) & 0xFF); // excluding 8bit Source Address and 8 bit Pdu Specific and 1 bit reserved, 1 bit datapage
		return resultPgn;
    }

    unsigned char getDataPage()
    {
        unsigned int pgn = extendedId & 0x3FFFFFF;// excluding priority 3 bits
		unsigned char resultPgn = static_cast<unsigned char>((pgn >> 24) & 1); // excluding 8bit Source Address and 8 bit Pdu Specific and 1 bit reserved
		return resultPgn;
    }

    unsigned char getPriority()
    {
        unsigned int pgn = extendedId & 0x1C000000;
		unsigned char resultPgn = static_cast<unsigned char>(pgn >> 26);
		return resultPgn;
    }

    unsigned char getPduSpecific()
    {
        unsigned char pgn = (extendedId >> 8) & 0xFF; // excluding priority 3 bits
        return pgn;
    }
};

class J1939_MSG
{
public:
    unsigned __int64        timeStamp; // Timestamp.
    unsigned char           cluster;     // Channel number.
    EJ1939_MSG_TYPE         msgType;
    EDIRECTION         direction;    // DIR_TX, DIR_RX
    J1939Id                     id;
    unsigned int dlc;            // Data length. 0 <= m_unDLC <= 1785 bytes.
    unsigned char data[1785];
};

struct sTLIN_TIME_MSG
{
    unsigned char m_ucMsgTyp;       // Message Type (0 - Header / 1 - Response)
    unsigned char m_ucChksumTyp;    // Checksum Type (0 - Classical / 1 - Enhanced)
    unsigned char m_ucDataLen;      // Data len (0..8)
    unsigned char m_ucMsgID;        // Protected Identifier
    unsigned char m_ucData[8];      // Databytes 0..8
    unsigned long m_ulTimeStamp;
    unsigned char m_ucChannel;      // Channel Number
    unsigned char m_ucChksum;
};
typedef sTLIN_TIME_MSG STLIN_TIME_MSG;
typedef STLIN_TIME_MSG* PSTLIN_TIME_MSG;

// All function prototype is used in function editor.
typedef VOID (__cdecl* PFMSG_HANDLER_CAN)(STCAN_TIME_MSG Rx_Msg);
typedef VOID (__cdecl* PFMSG_HANDLER_LIN)(STLIN_TIME_MSG Rx_Msg);

typedef VOID (__cdecl* PFMSG_HANDLER)(J1939_MSG pRxMsg);
typedef VOID (__cdecl* PFTIMER_HANDLER)();
typedef VOID (__cdecl* PFKEY_HANDLER)(UCHAR ucKeyVal);

typedef VOID (__cdecl* PFEVENT_HANDLER)(...);
typedef VOID (__cdecl* PFERROR_HANDLER)(SCAN_ERR ErrorMsg);
typedef VOID (__cdecl* PFDLL_HANDLER)();
typedef VOID (__cdecl* PFBUSEV_HANDLER)();
typedef BOOL (__cdecl* PFGET_PRG_VER)(int*,int*,HMODULE);
// Used is application call back function
typedef VOID (CALLBACK* APPTIMERPOINTER)(UINT,UINT,DWORD,DWORD,DWORD);

// This structure definition is for storing all information about a timer handler
// defined by user.
struct sTIMERHANDLER
{
    BOOL            bFromTimer;
    CString         omStrTimerHandlerName; // Name of Timer Handler Function
    BOOL            bTimerType;            // Type : Cyclic or Monshot
    BOOL            bTimerSelected;        // Selected or not for execution
    UINT            unTimerVal;            // the time-out value, in milliseconds
    PFTIMER_HANDLER pFTimerHandler;        // Long pointer to the function to be
    // notified when the time-out value
    // elapses.
    UINT            unTimerID;             // Specifies a nonzero timer identifier
    //    BOOL            bIsExecuting;          // Timer call back is under execution
    UINT            unCurrTime; //(ani1)
    CEvent          omWaitEvent;
    CEvent          omTimerEvent;
    CCriticalSection omCriticalSec;
    //  sTIMERHANDLER*  psNextTimer;
    HANDLE          hDllHandle;
    CWinThread*     pomThreadHandle;
};
typedef sTIMERHANDLER STIMERHANDLER;
typedef STIMERHANDLER* PSTIMERHANDLER;


//this structure store STIMERHANDLER and pointer to make a list
struct sTIMERHANDLERLIST
{
    STIMERHANDLER sTimerHandler;
    sTIMERHANDLERLIST* psNextTimer;
};
typedef sTIMERHANDLERLIST STIMERHANDLERLIST;
typedef STIMERHANDLERLIST* PSTIMERHANDLERLIST;

//This structure stores node name and pointer to the list of timer of
//the node
struct sNODETIMERLIST
{
    PSTIMERHANDLERLIST psTimerListPtr;
    CString omNodeName;
    sNODETIMERLIST* psNextTimerListPtr;
};
typedef sNODETIMERLIST SNODETIMERLIST;
typedef SNODETIMERLIST* PSNODETIMERLIST;

class CExecuteFunc;

//New data structure to store  node name and the "CExecuteFunc" pointer associated to that node:
struct sNODEOBJECT
{
    CString om_NodeName;
    CExecuteFunc* m_psExecuteFunc;
    sNODEOBJECT* m_psNextNode;
};
typedef sNODEOBJECT SNODEOBJECT;
typedef SNODEOBJECT* PSNODEOBJECT;

////New data structure to store  node name and the "CExecuteFunc" pointer associated to that node:
//struct sNODEOBJECTFLX
//{
//  CString om_NodeName;
//  CExecuteFunc* m_psExecuteFunc;
//  sNODEOBJECTFLX* m_psNextNode;
//};
//typedef sNODEOBJECTFLX SNODEOBJECTFLX;
//typedef SNODEOBJECTFLX* PSNODEOBJECTFLX;

// This structure stores the DLL Handler and pointer to its corresponding function
// to be executed on press of the key.
struct sDLLHANDLER
{
    eDLLHANDLER  m_eDLLHandler;           // DLL Handler
    PFDLL_HANDLER  m_pFDLLHandlers;       // Long pointer to the function to be
    // executed on DLL Load\Unload
};
typedef sDLLHANDLER SDLLHANDLER;
typedef sDLLHANDLER* PSDLLHANDLER;

struct sBUSEVHANDLER
{
    eBUSEVEHANDLER  m_eBusEvHandler;           // Bus Event Handler
    PFBUSEV_HANDLER m_pFBusEvHandlers;       // Long pointer to the function to be
};
typedef sBUSEVHANDLER SBUSEVHANDLER;
typedef sBUSEVHANDLER* PSBUSEVHANDLER;

// This structure stores the error code and pointer to its corresponding function
// to be executed on press of the key.
struct sERRORHANDLER
{
    ERROR_STATE    m_eErrorCode;         // Error value
    PFERROR_HANDLER m_pFErrorHandlers;    // Long pointer to the function to be  executed on error condition
    SCAN_ERR sErrorVal;                   // parameter to be passed to the error handler
    CExecuteFunc* m_pCExecuteFunc;        //to pass this pointer to access its variable
};
typedef sERRORHANDLER SERRORHANDLER;
typedef sERRORHANDLER* PSERRORHANDLER;


struct sEVENTHANDLERLIN
{
    eLinBusEventType    m_eLinEventCode;         // Error value
    PFEVENT_HANDLER m_pfEventHandlersLin;    // Long pointer to the function to be  executed on error condition
    CExecuteFunc* m_pCExecuteFunc;        //to pass this pointer to access its variable
    SERROR_INFO_LIN m_ouLinEventInfo;
};
typedef sEVENTHANDLERLIN SEVENTHANDLERLIN;
typedef sEVENTHANDLERLIN* PSEVENTHANDLERLIN;

// This structure stores the event handler info and pointer to its corresponding function
// to be executed.
struct sEVENTHANDLER
{
    BYTE   m_byEventType;         // Error value
    // Long pointer to the function to be  executed on error condition
    UINT32 m_unPGN;
    BYTE   m_bySrc;
    BYTE   m_byDest;
    BOOL   m_bSuccess;
    PFEVENT_HANDLER m_pFEventHandlers;
    CExecuteFunc* m_pCExecuteFunc;        //to pass this pointer to access its variable
};
typedef sEVENTHANDLER SEVENTHANDLER;
typedef sEVENTHANDLER* PSEVENTHANDLER;

// This structure stores the key value and pointer to its corresponding function
// to be executed on press of the key.
struct sKEYHANDLER
{
    UCHAR          ucKey;                 // Key value
    PFKEY_HANDLER  pFKeyHandlers;         // Long pointer to the function to be
    // executed on press of corresponding
    // key
};
typedef sKEYHANDLER SKEYHANDLER;
typedef SKEYHANDLER* PSKEYHANDLER;

struct sMSG_RANGE
{
    UINT    m_unFrom;
    UINT    m_unTo;
};
typedef sMSG_RANGE SMSG_RANGE;
typedef sMSG_RANGE* PSMSG_RANGE;
//
//struct sCYCLE
//{
//    UINT m_unBaseCycle;
//    UINT m_unRepeatation;
//};
//typedef sCYCLE SCYCLE;
//typedef sCYCLE* PSCYCLE;

struct sMSGINFO_FOR_HANDLER
{
    // For message handler defined on range of messages
    UINT        m_unRangeCount;
    PSMSG_RANGE m_psRange;

    // For a generic message handler
    BOOL    m_bGenericHandlerON;
};
typedef sMSGINFO_FOR_HANDLER SMSGINFO_FOR_HANDLER;
typedef sMSGINFO_FOR_HANDLER* PSMSGINFO_FOR_HANDLER;

struct sMSGID_HANDLER_CAN
{
    UINT    m_unMsgID;
    PFMSG_HANDLER_CAN m_pFMsgHandler;
};
typedef sMSGID_HANDLER_CAN SMSGID_HANDLER_CAN;
typedef sMSGID_HANDLER_CAN* PSMSGID_HANDLER_CAN;

//This is used for all the buses except CAN
struct sMSGID_HANDLER
{
    UINT    m_unMsgID;
    PFMSG_HANDLER m_pFMsgHandler;
};
typedef sMSGID_HANDLER SMSGID_HANDLER;
typedef sMSGID_HANDLER* PSMSGID_HANDLER;

struct sMSGID_RANGE_HANDLER_CAN
{
    SMSG_RANGE m_sMsgIDRange;
    PFMSG_HANDLER_CAN m_pFMsgHandler;
};
typedef sMSGID_RANGE_HANDLER_CAN SMSGID_RANGE_HANDLER_CAN;
typedef sMSGID_RANGE_HANDLER_CAN* PSMSGID_RANGE_HANDLER_CAN;

struct sMSGID_RANGE_HANDLER_LIN
{
    SMSG_RANGE m_sMsgIDRange;
    PFMSG_HANDLER_LIN m_pFMsgHandler;
};
typedef sMSGID_RANGE_HANDLER_LIN SMSGID_RANGE_HANDLER_LIN;
typedef SMSGID_RANGE_HANDLER_LIN* PSMSGID_RANGE_HANDLER_LIN;

struct sMSGID_LIST_HANDLER_CAN
{
    CList<UINT, UINT&> m_listMsgId;
    PFMSG_HANDLER_CAN m_pFMsgHandler;
};
typedef sMSGID_LIST_HANDLER_CAN SMSGID_LIST_HANDLER_CAN;
typedef sMSGID_LIST_HANDLER_CAN* PSMSGID_LIST_HANDLER_CAN;

struct sMSGID_LIST_HANDLER_LIN
{
    CList<UINT, UINT&> m_listMsgId;
    PFMSG_HANDLER_LIN m_pFMsgHandler;
};
typedef sMSGID_LIST_HANDLER_LIN SMSGID_LIST_HANDLER_LIN;
typedef SMSGID_LIST_HANDLER_LIN* PSMSGID_LIST_HANDLER_LIN;

//This is used for all the buses except CAN
struct sMSGID_RANGE_HANDLER
{
    SMSG_RANGE m_sMsgIDRange;
    PFMSG_HANDLER m_pFMsgHandler;
};
typedef sMSGID_RANGE_HANDLER SMSGID_RANGE_HANDLER;
typedef sMSGID_RANGE_HANDLER* PSMSGID_RANGE_HANDLER;

struct sEXECUTE_MSG_HANDLER_CAN
{
    STCAN_TIME_MSG m_sRxMsg;
    PFMSG_HANDLER_CAN m_pFMsgHandler;
    CExecuteFunc* m_pCExecuteFunc;
};
typedef sEXECUTE_MSG_HANDLER_CAN SEXECUTE_MSG_HANDLER_CAN;
typedef sEXECUTE_MSG_HANDLER_CAN* PSEXECUTE_MSG_HANDLER_CAN;

struct sEXECUTE_MSG_HANDLER_LIN
{
    STLIN_TIME_MSG m_sRxMsg;
    PFMSG_HANDLER_LIN m_pFMsgHandler;
    CExecuteFunc* m_pCExecuteFunc;
};
typedef sEXECUTE_MSG_HANDLER_LIN SEXECUTE_MSG_HANDLER_LIN;
typedef sEXECUTE_MSG_HANDLER_LIN* PSEXECUTE_MSG_HANDLER_LIN;


//This is used for all the buses except CAN
struct sEXECUTE_MSG_HANDLER
{
    void* m_pRxMsg;
    PFMSG_HANDLER m_pFMsgHandler;
    CExecuteFunc* m_pCExecuteFunc;
};
typedef sEXECUTE_MSG_HANDLER SEXECUTE_MSG_HANDLER;
typedef sEXECUTE_MSG_HANDLER* PSEXECUTE_MSG_HANDLER;

struct sEXECUTE_KEY_HANDLER
{
    UCHAR m_ucKeyValue;
    PFKEY_HANDLER m_pFKeyHandler;
    CExecuteFunc* m_pCExecuteFunc;
};
typedef sEXECUTE_KEY_HANDLER SEXECUTE_KEY_HANDLER;
typedef sEXECUTE_KEY_HANDLER* PSEXECUTE_KEY_HANDLER;
//struct sEXECUTE_CYCLE_HANDLER
//{
//    SCYCLE m_sCycle;
//    PFSTARTCYCLE_HANDLER m_pFStartCycleHandler;
//    CExecuteFunc* m_pCExecuteFunc;
//};
//typedef sEXECUTE_CYCLE_HANDLER SEXECUTE_CYCLE_HANDLER;
//typedef sEXECUTE_CYCLE_HANDLER* PSEXECUTE_CYCLE_HANDLER;
//struct sEXECUTE_SLOT_HANDLER
//{
//    UINT id;
//    //bool m_bSlotAll;
//    PFSLOT_HANDLER m_pFSlotHandler;
//    CExecuteFunc* m_pCExecuteFunc;
//};
//typedef sEXECUTE_SLOT_HANDLER SEXECUTE_SLOT_HANDLER;
//typedef sEXECUTE_SLOT_HANDLER* PSEXECUTE_SLOT_HANDLER;
//struct sEXECUTE_POC_HANDLER
//{
//    PFPOC_HANDLER m_pFPOCHandler;
//    CExecuteFunc* m_pCExecuteFunc;
//};
//typedef sEXECUTE_POC_HANDLER SEXECUTE_POC_HANDLER;
//typedef sEXECUTE_POC_HANDLER* PSEXECUTE_POC_HANDLER;

struct sMsgHandlerDataCan
{
    WORD wMsgCode;
    PFMSG_HANDLER_CAN m_pFMsgHandler; // Pointer to Message Handler function
    UINT unDLC;                   // Data Length Count
    int nMsgFormat;               // Big/Little Endian
    sMsgHandlerDataCan()             // To init pointers and data members
    {
        wMsgCode = 0;
        m_pFMsgHandler = NULL;
        unDLC = 0;
        nMsgFormat = -1;
    }
    BOOL operator==(const sMsgHandlerDataCan& RefObj) const
    {
        BOOL bReturn = FALSE;
        if (RefObj.wMsgCode == wMsgCode)
        {
            bReturn = TRUE;
        }
        return bReturn;
    }

};
typedef sMsgHandlerDataCan SMSGHANDLERDATA_CAN;
typedef sMsgHandlerDataCan* PSMSGHANDLERDATA_CAN;

struct sMsgHandlerDataLin
{
    WORD wMsgCode;
    PFMSG_HANDLER_LIN m_pFMsgHandler; // Pointer to Message Handler function
    UINT unDLC;                   // Data Length Count
    int nMsgFormat;               // Big/Little Endian
    sMsgHandlerDataLin()             // To init pointers and data members
    {
        wMsgCode = 0;
        m_pFMsgHandler = NULL;
        unDLC = 0;
        nMsgFormat = -1;
    }
    BOOL operator==(const sMsgHandlerDataLin& RefObj) const
    {
        BOOL bReturn = FALSE;
        if (RefObj.wMsgCode == wMsgCode)
        {
            bReturn = TRUE;
        }
        return bReturn;
    }

};
typedef sMsgHandlerDataLin SMSGHANDLERDATA_LIN;
typedef sMsgHandlerDataLin* PSMSGHANDLERDATA_LIN;


struct sMsgHandlerData
{
    UINT unMsgId;
    PFMSG_HANDLER m_pFMsgHandler; // Pointer to Message Handler function
    UINT unDLC;                   // Data Length Count
    int nMsgFormat;               // Big/Little Endian
    sMsgHandlerData()             // To init pointers and data members
    {
        unMsgId = 0;
        m_pFMsgHandler = NULL;
        unDLC = 0;
        nMsgFormat = -1;
    }
    BOOL operator==(const sMsgHandlerData& RefObj) const
    {
        BOOL bReturn = FALSE;
        if (RefObj.unMsgId == unMsgId)
        {
            bReturn = TRUE;
        }
        return bReturn;
    }

};
typedef sMsgHandlerData SMSGHANDLERDATA;
typedef sMsgHandlerData* PSMSGHANDLERDATA;

// error defines for CConfigDetails class..
#define defCONFIG_FILE_ERROR                1000
#define defCONFIG_FILE_OPEN_FAILED          defCONFIG_FILE_ERROR+2
#define defCONFIG_FILE_CLOSE_FAILED         defCONFIG_FILE_ERROR+5
#define defCONFIG_FILE_INVALID_FILE_EXTN    defCONFIG_FILE_ERROR+6
#define defCONFIG_FILE_CORRUPT              defCONFIG_FILE_ERROR+7
#define defCONFIG_FILE_HDR_CORRUPT          defCONFIG_FILE_ERROR+8
#define defCONFIG_FILE_NOT_FOUND            defCONFIG_FILE_ERROR+9
#define defCONFIG_FILE_VERSION_ERR          defCONFIG_FILE_ERROR+10
#define defCONFIG_FILE_SUCCESS              10
#define defFILE_LOADED                      11

#define defCONFIG_FILE_LOADING              0
#define defCONFIG_FILE_SAVING               1
#define defCONFIG_FILE_NEW                  2


#define defMAJOR_VERSION                    2
#define defMINOR_VERSION                    0
//To get the Version Number from the application DLL
#define defUNSUPPORTED_VER                  _T("Unsupported DLL Version %d.%d")
#define defOLD_VER                          _T("%s is created with old version of McNet. Please recompile the source code to get latest version of DLL")
#define defREGISTRY_LOCATION      _T("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\FRAME.exe")
#define def_MSG_MAP_HASH_SIZE     257
#define defSTR_ERROR_IN_MSG_PROG   "Exception occured in Message Handler ID : 0x%X"
#define defSTR_ERROR_IN_FLX_FRAME_PROG   "Exception occured in Frame: Channel = %d, SlotId : %d, BaseCycle = %d , Repetation = %d"
#define defSTR_ERROR_IN_PGN_PROG   "Exception occured in PGN Handler ID : 0x%X"
#define defSTR_ERROR_IN_KEY_PROG   "Exception occured in Key Handler of '%c'"
#define defSTR_ERROR_IN_EVENT_PROG   "Exception occured in Event Handler"
#define defSTR_ERROR_IN_ERR_PROG   "Exception occured in Error Handler"
#define defSTR_ERROR_IN_DLL_LOAD   "Exception occured in DLL Load Handler"
#define defSTR_ERROR_IN_DLL_UNLOAD "Exception occured in DLL UnLoad Handler"
#define defSTR_ERROR_IN_TIMER_PROG "Exception occured in Timer Handler \"%s\""
#define defSTR_ERROR_IN_BUS_CONNECT "Exception occured in Bus Connect Handler \"%s\""
#define defSTR_ERROR_IN_BUS_PRE_CONNECT "Exception occured in Bus Pre-Connect Handler \"%s\""
#define defSTR_ERROR_IN_BUS_DISCONNECT "Exception occured in Bus Disconnect Handler \"%s\""

#define defSTR_ERROR_IN_CYCLE_PROG   "Exception occured in Cycle Handler in Cycle Number = %d"
#define defSTR_ERROR_IN_POC_PROG   "Exception occured in POC Handler at POC State = %d"

const BYTE BIT_MSG_HANDLER_THREAD       = 0x01; // First bit
const BYTE BIT_KEY_HANDLER_THREAD       = 0x02; // Second bit
//const BYTE BIT_TX_SEL_MSG_THREAD        = 0x04; // Third bit
//const BYTE BIT_REPLAY_THREAD            = 0x08; // fourth bit
const BYTE BIT_DLL_LOAD_HANDLER_THREAD   = 0x10; // fifth bit
const BYTE BIT_DLL_UNLOAD_HANDLER_THREAD = 0x20; // sixth bit
const BYTE BIT_ERROR_HANDLER_THREAD      = 0x40; // Seventh bit
//const BYTE BIT_MULTI_MSG_THREAD          = 0x80; // Eighth bit
#define defSTR_ERROR_LOADING_HANDLER    _T("Failed to get address of %s Handlers: %s")
#define defSTR_ERROR_DUP_CYC_HANDLER    _T("Conflicting Cycle Handlers found at:")
#define defSTR_ERROR_DUP_FRAME_HANDLER  _T("Conflicting Frame Handlers found at:")
#define defSTR_DLL_HANDLER  _T("DLL")
#define defSTR_KEY_HANDLER  _T("Key")
#define defSTR_EVENT_HANDLER  _T("Event")
#define defSTR_MESSAGE_HANDLER  _T("Message")
#define defSTR_ERROR_HANDLER  _T("Error")
#define defSTR_TIMER_HANDLER  _T("Timer")
#define defSTR_SLOT_HANDLER  _T("Slot")
#define defSTR_POC_HANDLER  _T("POC")
#define defSTR_CYCLE_HANDLER  _T("StartCycle")

// This structure definition is to store a list of simulated systems whose paths have
// to be stored in the main configuration file.
struct sSIMSYSARRAY
{
    CString m_omStrSimSysPath;          // simulated system path.
    CString m_omStrSimSysName;          // simulated system name.
    sSIMSYSARRAY* psNextSimsys;         // Pointer to the next simulated system.
    sSIMSYSARRAY()
    {
        //      m_omStrSimSysPath = NULL;
        //      m_omStrSimSysName = NULL;
        psNextSimsys = NULL;
    }

};
typedef sSIMSYSARRAY SSIMSYSARRAY;
typedef SSIMSYSARRAY* PSSIMSYSARRAY;

#define defMASK_CHECK_UNCHECK    0x00003000
#define defMASK_LIST_CTRL        0x00003003

#define ALL_NODE_EDIT_CONFMN     _T("You are about to change all the Node details!\n\nAre you sure you want to Continue?")
#define ALL_SIMSYS_DELETE_CONFMN _T("You are about to Delete all the Simulated Systems.\n\nAre you sure you want to Delete?")
#define ASK_SIMSYS_SAVE_PROMPT   _T("Do you want to save changes to the simulated system file(s)?")
#define defSIZE_OF_ERROR_BUFFER  1024
#define defSIZE_OF_IMAGE         25
#define defSTR_BUILD_TRACE_LINE_MARK       _T(" ")
#define defTIMER_HEADER_NAME               _T("Timer Handler Name")
#define defTMPFILEEXTN                     _T("tmp")
#define MSG_MEMORY_CONSTRAINT              _T("Insufficient Memory available")
#define SIMSYS_DELETE_CONFMN     _T("You are about to Delete a Simulated System.\n\nAre you sure you want to Delete?")
#define ALL_SIMSYS_DELETE_CONFMN _T("You are about to Delete all the Simulated Systems.\n\nAre you sure you want to Delete?")
#define ALL_NODE_EDIT_CONFMN     _T("You are about to change all the Node details!\n\nAre you sure you want to Continue?")
#define ALL_NODE_DELETE_CONFMN   _T("You are about to Delete all the Nodes.\n\nAre you sure you want to Delete?")
#define NODE_DELETE_CONFMN   _T("You are about to Delete this Node.\n\nAre you sure you want to Delete?")
#define COPYFILE(SRC,DESTN)         ::CopyFile(SRC,DESTN,FALSE);
#define defCHANGEDSIMSYS           0x0000000000000001

#define defTMPFILEATTRIB    FILE_ATTRIBUTE_HIDDEN
#define defEMPTYSTR         _T("")
#define defSAVECONFIGERRSTR _T("Error while saving file %s. Restoring old data")// for sim sys 
#define defCONFIGSAVEERR    _T("File %s not saved properly. Please try again")// for sim sys 
#define defSIMSYSCOPYRIGHT  _T("RBEI_FRAME")
#define defSIMSYSVERSION_CAN 1.1
#define defSIMSYSPREVVERSION_ALL_BUS 1.2

// Included Busmaster version and Protocol name in 1.3
#define defSIMSYSVERSION_ALL_BUS 1.3
#define defCHAR_OPEN_PARENTHESIS    '{'
#define defCHAR_CLOSE_PARENTHESIS   '}'

#define defOPEN_PARENTHESIS      _T(", {")
#define defCLOSE_PARENTHESIS     _T(" }")
#define SEMI_COLON_STR           ";"

enum eMESSAGEFROM
{
    FNTREEVIEW = 0,
    OUTWND,
    FNVIEW,
    SENDMESGBUTTON
};

// enumerators for obtaining information from the configuration file
enum eACONFIGDETAILS
{
    OUT_WND_PLACEMENT = 0,
    SIMSYS_WND_PLACEMENT
};

//The structure pass to thread function for load Fn execution
struct sEXECUTE_LOAD_HANDLER
{
    PFDLL_HANDLER pFDllHandler;
    CExecuteFunc* m_pCExecuteFunc;
};
typedef sEXECUTE_LOAD_HANDLER SEXECUTE_LOAD_HANDLER;
typedef sEXECUTE_LOAD_HANDLER* PSEXECUTE_LOAD_HANDLER;

//The structure pass to thread function for load Fn execution
struct sEXECUTE_BUSEVENT_HANDLER
{
    PFBUSEV_HANDLER pFBusEventHandler;
    CExecuteFunc* m_pCExecuteFunc;
};
typedef sEXECUTE_BUSEVENT_HANDLER SEXECUTE_BUSEVENT_HANDLER;
typedef sEXECUTE_BUSEVENT_HANDLER* PSEXECUTE_BUSEVENT_HANDLER;

#define BLUE_COLOR              RGB(0,0,255)
#define DEFAULT_FONT            _T("Courier")
#define DEFAULT_FONT_ESCAPEMENT  0
#define DEFAULT_FONT_ORIENTATION 0
#define NOT_ITALIC               0
#define NO_UNDERLINE             0
#define NO_STRIKEOUT             0

#define defCHAR_PATH_SEPRATER    _T('\\')
#define defHEADER_FILE_NAME                 _T("_Unions.h")
#define defWAIT_DELAY_FOR_DLL_UNLOAD        500

//Color constants
#define WHITE_COLOR             RGB(255,255,255)
#define RED_COLOR               RGB(255,0,0)
#define BLUE_COLOR              RGB(0,0,255)
#define CONTEX_WND_COLOR        RGB(255,255,200) // color for context window
#define GREEN_COLOR             RGB(0,255,0)
#define TREE_BCK_COLOR          RGB(215,215,215) // Tree background color
#define BLACK_COLOR             RGB(0,0,0)
#define DIALOG_COLOR            RGB(150,150,150)
#define DEFAULT_MSG_COLOUR      RGB(0, 0, 0)

#define DEFAULT_X_POS           0
#define DEFAULT_Y_POS           0
#define DEFAULT_HEIGHT          0
#define DEFAULT_WIDTH           0
#define INCR_LEN                1

#define defNO_OF_CHARS_IN_TAB   4
#define MARGIN_FOR_FILE_VIEW    5
#define TAB_POSITION            1
#define TAB_ORIGIN              0

#define INT_INIT                (INT)0
#define LONG_INIT               (LONG)0
#define DWORD_INIT              (DWORD)0
#define CHAR_INIT               (CHAR)0
#define defCOUNT_INIT              0//initial value of a counter

#define NEXT_POSITION           1
#define START_POSITION          0

#define SPACE_BET_CHAR_IN_FILE_VIEW 20
#define SPACE_BET_LINE_IN_FILE_VIEW 5
#define IDC_LSTB_OUTPUT             300

#define GET_CONTEXT_WND_CHAR_HEIGHT() \
    ((::GetDeviceCaps(hDeviceContext,LOGPIXELSY) * 10) / 72)
#define GET_CONTEXT_WND_CHAR_WIDTH() \
    ((::GetDeviceCaps(hDeviceContext,LOGPIXELSX) * 6) / 72)
#define GET_FILE_VIEW_CHAR_HEIGHT() \
    ((omDeviceContext.GetDeviceCaps (LOGPIXELSY) * 10) / 72)
#define GET_FILE_VIEW_CHAR_WIDTH() \
    ((omDeviceContext.GetDeviceCaps (LOGPIXELSX) * 6) / 72)
