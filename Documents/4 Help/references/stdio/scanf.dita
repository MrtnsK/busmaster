<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/reference.dtd" []>
<reference id="scanf" xml:lang="en-us">
  <title>scanf, fscanf, sscanf : scan and format input</title>
  <refbody>
    <section>
      <title>Synopsis</title>
      <codeblock>#include &lt;stdio.h&gt;
int scanf(const char *format [, arg, ...]);
int fscanf(FILE *fd, const char *format [, arg, ...]);
int sscanf(const char *str, const char *format [, arg, ...]);</codeblock>
    </section>
    <section>
      <title>Description</title>
      <p>scanf scans a series of input fields from standard input, one character at a time. Each field is interpreted according to a format specifier passed to scanf in the format string at *format. scanf stores the interpreted input from each field at the address passed to it as the corresponding argument following format. You must supply the same number of format specifiers and address arguments as there are input fields.</p>
      <p>There must be sufficient address arguments for the given format specifiers; if not the results are unpredictable and likely disasterous. Excess address arguments are merely ignored.</p>
      <p>scanf often produces unexpected results if the input diverges from an expected pattern. Since the combination of gets or fgets followed by sscanf is safe and easy, that is the preferred way to be certain that a program is synchronized with input at the end of a line.</p>
      <p>fscanf and sscanf are identical to scanf, other than the source of input: fscanf reads from a file, and sscanf from a string.</p>
      <p>The string at *format is a character sequence composed of zero or more directives. Directives are composed of one or more whitespace characters, non-whitespace characters, and format specifications.</p>
      <p>Whitespace characters are blank ( ), tab (\t), or newline (\n). When scanf encounters a whitespace character in the format string it will read (but not store) all consecutive whitespace characters up to the next non-whitespace character in the input.</p>
      <p>Non-whitespace characters are all other ASCII characters except the percent sign (%). When scanf encounters a non-whitespace character in the format string it will read, but not store a matching non-whitespace character.</p>
      <p>Format specifications tell scanf to read and convert characters from the input field into specific types of values, and store then in the locations specified by the address arguments.</p>
      <p>Trailing whitespace is left unread unless explicitly matched in the format string.

    The format specifiers must begin with a percent sign (%) and have the following form:</p>
      <p>%[*][width][size]type</p>
      <p>Each format specification begins with the percent character (%). The other fields are:<ul>
          <li>* an optional marker; if present, it suppresses interpretation and assignment of this input field.</li>
          <li>width an optional maximum field width: a decimal integer, which controls the maximum number of characters that will be read before converting the current input field. If the input field has fewer than width characters, scanf reads all the characters in the field, and then proceeds with the next field and its format specification. If a whitespace or a non-convertable character occurs before width character are read, the characters up to that character are read, converted, and stored. Then scanf proceeds to the next format specification.</li>
          <li>size h, l, and L are optional size characters which override the default way that scanf interprets the data type of the corresponding argument. Modifier Type(s) h d, i, o, u, x convert input to short, store in short object h D, I, O, U, X no effect e, f, c, s, n, p l d, i, o, u, x convert input to long, store in long object l e, f, g convert input to double store in a double object l D, I, O, U, X no effect c, s, n, p L d, i, o, u, x convert to long double, store in long double L all others no effect</li>
          <li>type A character to specify what kind of conversion scanf performs. Here is a table of the conversion characters:</li>
          <li>% No conversion is done; the percent character (%) is stored.</li>
          <li>c Scans one character. Corresponding arg: (char *arg).</li>
          <li>s Reads a character string into the array supplied. Corresponding arg: (char arg[]).</li>
          <li>[pattern] Reads a non-empty character string into memory starting at arg. This area must be large enough to accept the sequence and a terminating null character which will be added automatically. (pattern is discussed in the paragraph following this table). Corresponding arg: (char *arg).</li>
          <li>d Reads a decimal integer into the corresponding arg: (int *arg).</li>
          <li>D Reads a decimal integer into the corresponding arg: (long *arg).</li>
          <li>o Reads an octal integer into the corresponding arg: (int *arg).</li>
          <li>O Reads an octal integer into the corresponding arg: (long *arg).</li>
          <li>u Reads an unsigned decimal integer into the corresponding arg: (unsigned int *arg).</li>
          <li>U Reads an unsigned decimal integer into the corresponding arg: (unsigned long *arg).</li>
          <li>x,X Read a hexadecimal integer into the corresponding arg: (int *arg).</li>
          <li>e, f, g Read a floating point number into the corresponding arg: (float *arg).</li>
          <li>E, F, G Read a floating point number into the corresponding arg: (double *arg).</li>
          <li>i Reads a decimal, octal or hexadecimal integer into the corresponding arg: (int *arg).</li>
          <li>I Reads a decimal, octal or hexadecimal integer into the corresponding arg: (long *arg).</li>
          <li>n Stores the number of characters read in the corresponding arg: (int *arg).</li>
          <li>p Stores a scanned pointer. ANSI C leaves the details to each implementation; this implementation treats %p exactly the same as %U. Corresponding arg: (void **arg).</li>
        </ul></p>
      <p>A pattern of characters surrounded by square brackets can be used instead of the s type character. pattern is a set of characters which define a search set of possible characters making up the scanf input field. If the first character in the brackets is a caret (^), the search set is inverted to include all ASCII characters except those between the brackets. There is also a range facility which you can use as a shortcut. %[0-9] matches all decimal digits. The hyphen must not be the first or last character in the set. The character prior to the hyphen must be lexically less than the character after it. Here are some pattern examples:<ul>
          <li>%[abcd] matches strings containing only a, b, c, and d.</li>
          <li>%[^abcd] matches strings containing any characters except a, b, c, or d</li>
          <li>%[A-DW-Z] matches strings containing A, B, C, D, W, X, Y, Z</li>
          <li>%[z-a] matches the characters z, -, and a</li>
        </ul></p>
      <p>Floating point numbers (for field types e, f, g, E, F, G) must correspond to the following general form: [+/-] ddddd[.]ddd [E|e[+|-]ddd] where objects inclosed in square brackets are optional, and ddd represents decimal, octal, or hexadecimal digits.</p>
    </section>
    <section>
      <title>Returns</title>
      <p>scanf returns the number of input fields successfully scanned, converted and stored; the return value does not include scanned fields which were not stored.</p>
      <p>If scanf attempts to read at end-of-file, the return value is EOF.</p>
      <p>If no fields were stored, the return value is 0.</p>
      <p>scanf might stop scanning a particular field before reaching the normal field end character, or may terminate entirely.</p>
      <p>scanf stops scanning and storing the current field and moves to the next input field (if any) in any of the following situations:<ul>
          <li>The assignment suppressing character (*) appears after the % in the format specification; the current input field is scanned but not stored.</li>
          <li>width characters have been read (width is a width specification, a positive decimal integer).</li>
          <li>The next character read cannot be converted under the the current format (for example, if a Z is read when the format is decimal).</li>
          <li>The next character in the input field does not appear in the search set (or does appear in the inverted search set).</li>
        </ul></p>
      <p>When scanf stops scanning the current input field for one of these reasons, the next character is considered unread and used as the first character of the following input field, or the first character in a subsequent read operation on the input.</p>
      <p>scanf will terminate under the following circumstances:<ul>
          <li>The next character in the input field conflicts with a corresponding non-whitespace character in the format string.</li>
          <li>The next character in the input field is EOF.</li>
          <li>The format string has been exhausted.</li>
        </ul></p>
      <p>When the format string contains a character sequence that is not part of a format specification, the same character sequence must appear in the input; scanf will scan but not store the matched characters. If a conflict occurs, the first conflicting character remains in the input as if it had never been read.</p>
    </section>
  </refbody>
</reference>
