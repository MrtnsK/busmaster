diff -Naur a/WinDDK/7600.16385.1/inc/atl71/atlbase.h b/WinDDK/7600.16385.1/inc/atl71/atlbase.h
--- a/WinDDK/7600.16385.1/inc/atl71/atlbase.h	Thu Aug 28 12:16:41 2014
+++ b/WinDDK/7600.16385.1/inc/atl71/atlbase.h	Thu Aug 28 12:27:05 2014
@@ -245,9 +245,9 @@
 
 #if defined(_M_IA64) || defined(_M_IX86) || defined (_M_AMD64)
 
-#pragma section("ATL$__a", read, shared)
-#pragma section("ATL$__z", read, shared)
-#pragma section("ATL$__m", read, shared)
+#pragma section("ATL$__a", read)
+#pragma section("ATL$__z", read)
+#pragma section("ATL$__m", read)
 extern "C"
 {
 __declspec(selectany) __declspec(allocate("ATL$__a")) _ATL_OBJMAP_ENTRY* __pobjMapEntryFirst = NULL;
diff -Naur a/WinDDK/7600.16385.1/inc/atl71/atlchecked.h b/WinDDK/7600.16385.1/inc/atl71/atlchecked.h
--- a/WinDDK/7600.16385.1/inc/atl71/atlchecked.h	Thu Aug 28 12:16:55 2014
+++ b/WinDDK/7600.16385.1/inc/atl71/atlchecked.h	Thu Aug 28 12:26:18 2014
@@ -49,6 +49,7 @@
 	return nError;
 }
 
+#define AFX_CRT_ERRORCHECK(expr) AtlCrtErrorCheck(expr)
 /////////////////////////////////////////////////////////////////////////////
 // Secure (Checked) CRT functions
 
diff -Naur a/WinDDK/7600.16385.1/inc/atl71/atlexcept.h b/WinDDK/7600.16385.1/inc/atl71/atlexcept.h
--- a/WinDDK/7600.16385.1/inc/atl71/atlexcept.h	Thu Aug 28 12:16:55 2014
+++ b/WinDDK/7600.16385.1/inc/atl71/atlexcept.h	Thu Aug 28 12:26:18 2014
@@ -69,7 +69,7 @@
 	}
 	else
 	{
-		AfxThrowOleException( hr );
+		AtlThrow( hr );
 	}
 #else
 	throw CAtlException( hr );
diff -Naur a/WinDDK/7600.16385.1/inc/atl71/cstringt.h b/WinDDK/7600.16385.1/inc/atl71/cstringt.h
--- a/WinDDK/7600.16385.1/inc/atl71/cstringt.h	Thu Aug 28 12:16:55 2014
+++ b/WinDDK/7600.16385.1/inc/atl71/cstringt.h	Thu Aug 28 12:26:18 2014
@@ -20,12 +20,8 @@
 #pragma warning (push)
 #pragma warning(disable : 4668)	// is not defined as a preprocessor macro, replacing with '0' for '#if/#elif
 #pragma warning(disable : 4820)	// padding added after member
-#pragma warning(disable : 4127)	// 
-#pragma warning(disable : 4995)
-#pragma warning(disable : 4996)
 #endif //!_ATL_NO_PRAGMA_WARNINGS
 
-
 #pragma warning(disable:4786)	// avoid 255-character limit warnings
 
 #ifdef _MANAGED
@@ -33,16 +29,13 @@
 #endif
 
 #include <atlsimpstr.h>
-#include <stddef.h>
 
+#include <stddef.h>
 #ifndef _INC_NEW
 #include <new.h>
 #endif
-
 #include <stdio.h>
-#include <wchar.h>
 #include <limits.h>
-
 #ifndef _ATL_MIN_CRT
 #include <mbstring.h>
 #endif
@@ -56,25 +49,12 @@
 #include <atlconv.h>
 #include <atlmem.h>
 
-#ifndef DWORD_MAX
-#define DWORD_MAX     0xffffffffUL  /* maximum DWORD value */
-#endif
-
 struct tagVARIANT;
 typedef tagVARIANT VARIANT;
 
-#ifndef _AFX
-#define _AFX_FUNCNAME(_Name) _Name
-#endif
-
 #pragma push_macro("new")
 #undef new
 
-#if defined(_AFX)
-#pragma push_macro("FormatMessage")
-#undef FormatMessage
-#endif
-
 /////////////////////////////////////////////////////////////////////////////
 // Naming conventions:
 //    The term "length" can be confusing when dealing with ANSI, Unicode, and
@@ -96,22 +76,10 @@
 namespace ATL
 {
 
-// This struct have the same memory layout as CString and is used to enable
-// const statically initialized CString without making a copy on the heap
-template <class StringType,int t_nChars> struct CConstFixedStringT
-{
-	CStringData m_data;
-	typename StringType::XCHAR m_achData[t_nChars];
-};
-
-#define IMPLEMENT_CONST_STRING_PTR(StringType, value, name) const CConstFixedStringT<StringType, sizeof(value)/sizeof(StringType::XCHAR)> _init##name ={ 	{NULL,		sizeof(value)/sizeof(StringType::XCHAR)-1, 	sizeof(value)/sizeof(StringType::XCHAR)-1, 	-1},			value	};	const StringType::XCHAR* const _value##name = _init##name.m_achData;	extern const StringType* const name = CONST_STRING_PTR(StringType, name);
-#define DECLARE_CONST_STRING_PTR(StringType, name) extern const StringType* const name;
-#define CONST_STRING_PTR(StringType, name) reinterpret_cast<const StringType* const>(&_value##name)
-
 /////////////////////////////////////////////////////////////////////////////
 // inline helpers
 
-inline int _wcstombsz(__out_ecount(count) char* mbstr, __in_z const wchar_t* wcstr, __in ULONG count) throw()
+inline int _wcstombsz(char* mbstr, const wchar_t* wcstr, ULONG count) throw()
 {
 	// count is number of bytes
 	if (count == 0 && mbstr != NULL)
@@ -123,7 +91,7 @@
 	return result;
 }
 
-inline int _mbstowcsz(__out_ecount_z(count) wchar_t* wcstr, __in_z const char* mbstr, __in ULONG count)
+inline int _mbstowcsz(wchar_t* wcstr, const char* mbstr, ULONG count) throw()
 {
 	// count is number of wchar_t's
 	if (count == 0 && wcstr != NULL)
@@ -131,12 +99,9 @@
 
 	int result = ::MultiByteToWideChar(_AtlGetConversionACP(), 0, mbstr, -1,
 		wcstr, count);
-	ATLENSURE(wcstr == NULL || result <= (int)count);
-	if ((result > 0) && (wcstr != NULL) && (ULONG)result <= count)
-	{
+	ATLASSERT(wcstr == NULL || result <= (int)count);
+	if ((result > 0) && (wcstr != NULL))
 		wcstr[result-1] = 0;
-	}
-
 	return result;
 }
 
@@ -146,9 +111,6 @@
 // either the real Unicode implementation (on NT), or a conversion helper
 // (on Win9x).
 
-#pragma warning( push )
-#pragma warning( disable : 4793 )
-
 inline void _AtlInstallStringThunk(void** ppThunk, void* pfnWin9x, void* pfnNT) throw()
 {
 #pragma warning (push)
@@ -173,8 +135,6 @@
 	InterlockedExchangePointer(ppThunk, pfn);
 }
 
-#pragma warning( pop )
-
 typedef int (WINAPI* ATLCOMPARESTRINGW)(LCID, DWORD, LPCWSTR, int, LPCWSTR, int);
 typedef BOOL (WINAPI* ATLGETSTRINGTYPEEXW)(LCID, DWORD, LPCWSTR, int, LPWORD);
 typedef int (WINAPI* ATLLSTRCMPIW)(LPCWSTR, LPCWSTR);
@@ -194,8 +154,8 @@
 
 extern _AtlStringThunks _strthunks;
 
-inline DWORD WINAPI GetEnvironmentVariableWFake(__in_z LPCWSTR pszName, 
-	__out_ecount_part_opt(nSize, return) LPWSTR pszBuffer, __in DWORD nSize)
+inline DWORD WINAPI GetEnvironmentVariableWFake(LPCWSTR pszName, 
+	LPWSTR pszBuffer, DWORD nSize)
 {
 	ULONG nSizeA;
 	ULONG nSizeW;
@@ -203,33 +163,23 @@
 	CW2A pszNameA(pszName);
 
 	nSizeA = ::GetEnvironmentVariableA(pszNameA, NULL, 0);
-	if( nSizeA == 0 || nSizeA==ULONG_MAX)
-	{
+	if (nSizeA == 0)
 		return 0;
-	}
 
-	pszBufferA.Allocate(nSizeA + 1);
-	if( 0 == ::GetEnvironmentVariableA(pszNameA, pszBufferA, nSizeA))
-	{
-		return 0;
-	}
+	pszBufferA.Allocate(nSizeA*2);
+	::GetEnvironmentVariableA(pszNameA, pszBufferA, nSizeA);
 
 	nSizeW = ::MultiByteToWideChar(_AtlGetConversionACP(), 0, pszBufferA, -1, NULL, 0);
-	if( nSize == 0 )
-	{
-		return nSizeW > DWORD_MAX ? 0 : DWORD(nSizeW);
-	}
-	
-	if( nSize >= nSizeW )
-	{
-		nSizeW = ::MultiByteToWideChar(_AtlGetConversionACP(), 0, pszBufferA, -1, pszBuffer, nSize );
-	}
+	if (nSize == 0)
+		return nSizeW;
+	ATLASSERT(nSize >= nSizeW);
+	::MultiByteToWideChar(_AtlGetConversionACP(), 0, pszBufferA, -1, pszBuffer, nSizeW);
 
-	return min(nSize, nSizeW);
+	return nSizeW;
 }
 
-inline DWORD WINAPI GetEnvironmentVariableWThunk(__in_z LPCWSTR pszName, 
-	__out_ecount_part_opt(nSize, return) LPWSTR pszBuffer, __in DWORD nSize)
+inline DWORD WINAPI GetEnvironmentVariableWThunk(LPCWSTR pszName, 
+	LPWSTR pszBuffer, DWORD nSize)
 {
 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnGetEnvironmentVariableW), 
 		GetEnvironmentVariableWFake, ::GetEnvironmentVariableW);
@@ -237,8 +187,8 @@
 	return _strthunks.pfnGetEnvironmentVariableW(pszName, pszBuffer, nSize);
 }
 
-inline int WINAPI CompareStringWFake(__in LCID lcid, __in DWORD dwFlags, 
-	__in_ecount(nLength1) LPCWSTR pszString1, __in int nLength1, __in_ecount(nLength2) LPCWSTR pszString2, __in int nLength2)
+inline int WINAPI CompareStringWFake(LCID lcid, DWORD dwFlags, 
+	LPCWSTR pszString1, int nLength1, LPCWSTR pszString2, int nLength2)
 {
 	USES_CONVERSION_EX;
 	
@@ -261,16 +211,16 @@
 	return ::CompareStringA(lcid, dwFlags, pszAString1, nLength1, pszAString2, nLength2);
 }
 
-inline int WINAPI CompareStringWThunk(__in LCID lcid, __in DWORD dwFlags, 
-	__in_ecount(nLength1) LPCWSTR pszString1, __in int nLength1, __in_ecount(nLength2) LPCWSTR pszString2, __in int nLength2)
+inline int WINAPI CompareStringWThunk(LCID lcid, DWORD dwFlags, 
+	LPCWSTR pszString1, int nLength1, LPCWSTR pszString2, int nLength2)
 {
 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnCompareStringW), CompareStringWFake, ::CompareStringW);
 
 	return _strthunks.pfnCompareStringW(lcid, dwFlags, pszString1, nLength1, pszString2, nLength2);
 }
 
-inline BOOL WINAPI GetStringTypeExWFake(__in LCID lcid, __in DWORD dwInfoType, __in_xcount(nLength) LPCWSTR pszSrc,
-	__in int nLength, __out_xcount(nLength) LPWORD pwCharType)
+inline BOOL WINAPI GetStringTypeExWFake(LCID lcid, DWORD dwInfoType, LPCWSTR pszSrc,
+	int nLength, LPWORD pwCharType)
 {
 	int nLengthA;
 	CTempBuffer<char> pszA;
@@ -279,68 +229,66 @@
 	pszA.Allocate(nLengthA);
 	::WideCharToMultiByte(_AtlGetConversionACP(), 0, pszSrc, nLength, pszA, nLengthA, NULL, NULL);
 
-	if (nLength == -1 || nLengthA > nLength)
-		nLengthA = nLength;
+	if (nLength == -1)
+		nLengthA = -1;
 
 	return ::GetStringTypeExA(lcid, dwInfoType, pszA, nLengthA, pwCharType);
 }
 
-inline BOOL WINAPI GetStringTypeExWThunk(__in LCID lcid, __in DWORD dwInfoType, __in_ecount(nLength) LPCWSTR pszSrc,
-	__in int nLength, __out LPWORD pwCharType)
+inline BOOL WINAPI GetStringTypeExWThunk(LCID lcid, DWORD dwInfoType, LPCWSTR pszSrc,
+	int nLength, LPWORD pwCharType)
 {
 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnGetStringTypeExW), GetStringTypeExWFake, ::GetStringTypeExW);
 
 	return _strthunks.pfnGetStringTypeExW(lcid, dwInfoType, pszSrc, nLength, pwCharType);
 }
 
-inline int WINAPI lstrcmpiWFake(__in_z LPCWSTR psz1, __in_z LPCWSTR psz2)
+inline int WINAPI lstrcmpiWFake(LPCWSTR psz1, LPCWSTR psz2)
 {
-	USES_CONVERSION_EX;
+	USES_CONVERSION;
 
-	return ::lstrcmpiA(W2A_EX_DEF(psz1), W2A_EX_DEF(psz2));
+	return ::lstrcmpiA(W2A(psz1), W2A(psz2));
 }
 
-inline int WINAPI lstrcmpiWThunk(__in_z LPCWSTR psz1, __in_z LPCWSTR psz2)
+inline int WINAPI lstrcmpiWThunk(LPCWSTR psz1, LPCWSTR psz2)
 {
 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnlstrcmpiW), lstrcmpiWFake, ::lstrcmpiW);
 
 	return _strthunks.pfnlstrcmpiW(psz1, psz2);
 }
 
-inline LPWSTR WINAPI CharLowerWFake(__inout_z LPWSTR psz)
+inline LPWSTR WINAPI CharLowerWFake(LPWSTR psz)
 {
-	ATLENSURE(psz);
-	USES_CONVERSION_EX;
+	USES_CONVERSION;
 	LPSTR pszA;
 
-	pszA = W2A_EX_DEF(psz);
+	pszA = W2A(psz);
 	::CharLowerA(pszA);
+	wcscpy(psz, A2W(pszA));
 
-	Checked::wcscpy_s(psz, wcslen(psz) + 1, A2W_EX_DEF(pszA));
 	return psz;
 }
 
-inline LPWSTR WINAPI CharLowerWThunk(__inout LPWSTR psz)
+inline LPWSTR WINAPI CharLowerWThunk(LPWSTR psz)
 {
 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnCharLowerW), CharLowerWFake, ::CharLowerW);
 
 	return _strthunks.pfnCharLowerW(psz);
 }
 
-inline LPWSTR WINAPI CharUpperWFake(__inout_z LPWSTR psz)
+inline LPWSTR WINAPI CharUpperWFake(LPWSTR psz)
 {
-	ATLENSURE(psz);
-	USES_CONVERSION_EX;
+	USES_CONVERSION;
 	LPSTR pszA;
 
-	pszA = W2A_EX_DEF(psz);
+	pszA = W2A(psz);
 	::CharUpperA(pszA);
+	wcscpy(psz, A2W(pszA));
 
-	Checked::wcscpy_s(psz, wcslen(psz) + 1, A2W_EX_DEF(pszA));
 	return psz;
 }
 
-inline LPWSTR WINAPI CharUpperWThunk(__inout LPWSTR psz)
+inline LPWSTR WINAPI CharUpperWThunk(LPWSTR psz)
 {
 	_AtlInstallStringThunk(reinterpret_cast<void**>(&_strthunks.pfnCharUpperW), CharUpperWFake, ::CharUpperW);
 
@@ -368,218 +316,160 @@
 	public ChTraitsBase< _CharType >
 {
 public:
-	static char* __cdecl CharNext( __in_z const char* p ) throw()
+	static char* __cdecl CharNext( const char* p ) throw()
 	{
 		return reinterpret_cast< char* >( _mbsinc( reinterpret_cast< const unsigned char* >( p ) ) );
 	}
 
-	static int __cdecl IsDigit( __in char ch ) throw()
+	static int __cdecl IsDigit( char ch ) throw()
 	{
 		return _ismbcdigit( ch );
 	}
 
-	static int __cdecl IsSpace( __in char ch ) throw()
+	static int __cdecl IsSpace( char ch ) throw()
 	{
 		return _ismbcspace( ch );
 	}
 
-	static int __cdecl StringCompare( __in_z LPCSTR pszA, __in_z LPCSTR pszB ) throw()
+	static int __cdecl StringCompare( LPCSTR pszA, LPCSTR pszB ) throw()
 	{
 		return _mbscmp( reinterpret_cast< const unsigned char* >( pszA ), reinterpret_cast< const unsigned char* >( pszB ) );
 	}
 
-	static int __cdecl StringCompareIgnore( __in_z LPCSTR pszA, __in_z LPCSTR pszB ) throw()
+	static int __cdecl StringCompareIgnore( LPCSTR pszA, LPCSTR pszB ) throw()
 	{
 		return _mbsicmp( reinterpret_cast< const unsigned char* >( pszA ), reinterpret_cast< const unsigned char* >( pszB ) );
 	}
 
-	static int __cdecl StringCollate( __in_z LPCSTR pszA, __in_z LPCSTR pszB ) throw()
+	static int __cdecl StringCollate( LPCSTR pszA, LPCSTR pszB ) throw()
 	{
 		return _mbscoll( reinterpret_cast< const unsigned char* >( pszA ), reinterpret_cast< const unsigned char* >( pszB ) );
 	}
 
-	static int __cdecl StringCollateIgnore( __in_z LPCSTR pszA, __in_z LPCSTR pszB ) throw()
+	static int __cdecl StringCollateIgnore( LPCSTR pszA, LPCSTR pszB ) throw()
 	{
 		return _mbsicoll( reinterpret_cast< const unsigned char* >( pszA ), reinterpret_cast< const unsigned char* >( pszB ) );
 	}
 
-	static LPCSTR __cdecl StringFindString( __in_z LPCSTR pszBlock, __in_z LPCSTR pszMatch ) throw()
+	static LPCSTR __cdecl StringFindString( LPCSTR pszBlock, LPCSTR pszMatch ) throw()
 	{
 		return reinterpret_cast< LPCSTR >( _mbsstr( reinterpret_cast< const unsigned char* >( pszBlock ),
 			reinterpret_cast< const unsigned char* >( pszMatch ) ) );
 	}
 
-	static LPSTR __cdecl StringFindString( __in_z LPSTR pszBlock, __in_z LPCSTR pszMatch ) throw()
+	static LPSTR __cdecl StringFindString( LPSTR pszBlock, LPCSTR pszMatch ) throw()
 	{
 		return( const_cast< LPSTR >( StringFindString( const_cast< LPCSTR >( pszBlock ), pszMatch ) ) );
 	}
 
-	static LPCSTR __cdecl StringFindChar( __in_z LPCSTR pszBlock, __in char chMatch ) throw()
+	static LPCSTR __cdecl StringFindChar( LPCSTR pszBlock, char chMatch ) throw()
 	{
 		return reinterpret_cast< LPCSTR >( _mbschr( reinterpret_cast< const unsigned char* >( pszBlock ), (unsigned char)chMatch ) );
 	}
 
-	static LPCSTR __cdecl StringFindCharRev( __in_z LPCSTR psz, __in char ch ) throw()
+	static LPCSTR __cdecl StringFindCharRev( LPCSTR psz, char ch ) throw()
 	{
-		return reinterpret_cast< LPCSTR >( _mbsrchr( reinterpret_cast< const unsigned char* >( psz ), (unsigned char)ch ) );
+		return reinterpret_cast< LPSTR >( _mbsrchr( reinterpret_cast< const unsigned char* >( psz ), (unsigned char)ch ) );
 	}
 
-	static LPCSTR __cdecl StringScanSet( __in_z LPCSTR pszBlock, __in_z LPCSTR pszMatch ) throw()
+	static LPCSTR __cdecl StringScanSet( LPCSTR pszBlock, LPCSTR pszMatch ) throw()
 	{
 		return reinterpret_cast< LPCSTR >( _mbspbrk( reinterpret_cast< const unsigned char* >( pszBlock ),
 			reinterpret_cast< const unsigned char* >( pszMatch ) ) );
 	}
 
-	static int __cdecl StringSpanIncluding( __in_z LPCSTR pszBlock, __in_z LPCSTR pszSet ) throw()
+	static int __cdecl StringSpanIncluding( LPCSTR pszBlock, LPCSTR pszSet ) throw()
 	{
 		return (int)_mbsspn( reinterpret_cast< const unsigned char* >( pszBlock ), reinterpret_cast< const unsigned char* >( pszSet ) );
 	}
 
-	static int __cdecl StringSpanExcluding( __in_z LPCSTR pszBlock, __in_z LPCSTR pszSet ) throw()
+	static int __cdecl StringSpanExcluding( LPCSTR pszBlock, LPCSTR pszSet ) throw()
 	{
 		return (int)_mbscspn( reinterpret_cast< const unsigned char* >( pszBlock ), reinterpret_cast< const unsigned char* >( pszSet ) );
 	}
 
-	_ATL_INSECURE_DEPRECATE("You must pass an output size to ChTraitsCRT::StringUppercase")
-	static LPSTR __cdecl StringUppercase( __inout LPSTR psz ) throw()
+	static LPSTR __cdecl StringUppercase( LPSTR psz ) throw()
 	{
 		return reinterpret_cast< LPSTR >( _mbsupr( reinterpret_cast< unsigned char* >( psz ) ) );
 	}
 
-	_ATL_INSECURE_DEPRECATE("You must pass an output size to ChTraitsCRT::StringLowercase")
-	static LPSTR __cdecl StringLowercase( __inout LPSTR psz ) throw()
+	static LPSTR __cdecl StringLowercase( LPSTR psz ) throw()
 	{
 		return reinterpret_cast< LPSTR >( _mbslwr( reinterpret_cast< unsigned char* >( psz ) ) );
 	}
 
-	static LPSTR __cdecl StringUppercase( __inout_ecount(size) LPSTR psz, __in size_t size ) throw()
-	{
-		Checked::mbsupr_s(reinterpret_cast< unsigned char* >( psz ), size);
-		return psz;
-	}
-
-	static LPSTR __cdecl StringLowercase( __inout_ecount(size) LPSTR psz, __in size_t size ) throw()
-	{
-		Checked::mbslwr_s( reinterpret_cast< unsigned char* >( psz ), size );
-		return psz;
-	}
-
-	static LPSTR __cdecl StringReverse( __inout LPSTR psz ) throw()
+	static LPSTR __cdecl StringReverse( LPSTR psz ) throw()
 	{
 		return reinterpret_cast< LPSTR >( _mbsrev( reinterpret_cast< unsigned char* >( psz ) ) );
 	}
 
-	static int __cdecl GetFormattedLength( __in __format_string LPCSTR pszFormat, va_list args ) throw()
+	static int __cdecl GetFormattedLength( LPCSTR pszFormat, va_list args ) throw()
 	{
 		return _vscprintf( pszFormat, args );
 	}
 
-	_ATL_INSECURE_DEPRECATE("You must pass an output size to ChTraitsCRT::Format")
-	static int __cdecl Format( __out LPSTR pszBuffer, __in __format_string LPCSTR pszFormat, va_list args ) throw()
+	static int __cdecl Format( LPSTR pszBuffer, LPCSTR pszFormat, va_list args ) throw()
 	{
 		return vsprintf( pszBuffer, pszFormat, args );
 	}
 
-    static int __cdecl Format
-		( __out_ecount_part(nlength, return) LPSTR pszBuffer, __in size_t nlength, __in __format_string LPCSTR pszFormat, va_list args ) throw()
-	{
-		return vsprintf_s( pszBuffer, nlength, pszFormat, args );
-	}
-
-	static int __cdecl GetBaseTypeLength( __in_z LPCSTR pszSrc ) throw()
+	static int __cdecl GetBaseTypeLength( LPCSTR pszSrc ) throw()
 	{
 		// Returns required buffer length in XCHARs
 		return int( strlen( pszSrc ) );
 	}
 
-	static int __cdecl GetBaseTypeLength( __in_ecount(nLength) LPCSTR pszSrc, int nLength ) throw()
+	static int __cdecl GetBaseTypeLength( LPCSTR pszSrc, int nLength ) throw()
 	{
 		(void)pszSrc;
 		// Returns required buffer length in XCHARs
 		return nLength;
 	}
 
-	static int __cdecl GetBaseTypeLength( __in_z LPCWSTR pszSource ) throw()
+	static int __cdecl GetBaseTypeLength( LPCWSTR pszSource ) throw()
 	{
 		// Returns required buffer length in XCHARs
 		return ::WideCharToMultiByte( _AtlGetConversionACP(), 0, pszSource, -1, NULL, 0, NULL, NULL )-1;
 	}
 
-	static int __cdecl GetBaseTypeLength( __in_ecount(nLength) LPCWSTR pszSource, int nLength ) throw()
+	static int __cdecl GetBaseTypeLength( LPCWSTR pszSource, int nLength ) throw()
 	{
 		// Returns required buffer length in XCHARs
 		return ::WideCharToMultiByte( _AtlGetConversionACP(), 0, pszSource, nLength, NULL, 0, NULL, NULL );
 	}
 
-	static void __cdecl ConvertToBaseType( __out_ecount(nDestLength) LPSTR pszDest, __in int nDestLength,
-		__in_z LPCSTR pszSrc, int nSrcLength = -1 ) throw()
+	static void __cdecl ConvertToBaseType( LPSTR pszDest, int nDestLength,
+		LPCSTR pszSrc, int nSrcLength = -1 ) throw()
 	{
-		if (nSrcLength == -1) { nSrcLength=1 + GetBaseTypeLength(pszSrc); }
+		(void)nSrcLength;
 		// nLen is in XCHARs
-		Checked::memcpy_s( pszDest, nDestLength*sizeof( char ), 
-			pszSrc, nSrcLength*sizeof( char ) );
+		memcpy( pszDest, pszSrc, nDestLength*sizeof( char ) );
 	}
 
-	static void __cdecl ConvertToBaseType( __out_ecount(nDestLength) LPSTR pszDest, __in int nDestLength,
-		__in_z LPCWSTR pszSrc, __in int nSrcLength = -1) throw()
+	static void __cdecl ConvertToBaseType( LPSTR pszDest, int nDestLength,
+		LPCWSTR pszSrc, int nSrcLength = -1 ) throw()
 	{
 		// nLen is in XCHARs
 		::WideCharToMultiByte( _AtlGetConversionACP(), 0, pszSrc, nSrcLength, pszDest, nDestLength, NULL, NULL );
 	}
 
-	_ATL_INSECURE_DEPRECATE("You must pass an output size to ChTraitsCRT::ConvertToOem")
-	static void ConvertToOem(__inout _CharType* pstrString) throw()
-	{
-		BOOL fSuccess=::CharToOemA(pstrString, pstrString);
-		// old version can't report error
-		ATLASSERT(fSuccess);
-	}
-
-	_ATL_INSECURE_DEPRECATE("You must pass an output size to ChTraitsCRT::ConvertToAnsi")
-	static void ConvertToAnsi(__inout _CharType* pstrString) throw()
+	static void __cdecl ConvertToOem( LPSTR psz ) throw()
 	{
-		BOOL fSuccess=::OemToCharA(pstrString, pstrString);
-		// old version can't report error
-		ATLASSERT(fSuccess);
+		::AnsiToOem( psz, psz );
 	}
 
-	static void ConvertToOem(__inout_ecount(size) _CharType* pstrString, __in size_t size)
+	static void __cdecl ConvertToAnsi( LPSTR psz ) throw()
 	{
-		if(size>UINT_MAX)
-		{
-			// API only allows DWORD size
-			AtlThrow(E_INVALIDARG);
-		}
-		DWORD dwSize=static_cast<DWORD>(size);
-		BOOL fSuccess=::CharToOemBuffA(pstrString, pstrString, dwSize);
-		if(!fSuccess)
-		{
-			AtlThrowLastWin32();
-		}
-	}
-
-	static void ConvertToAnsi(__inout_ecount(size) _CharType* pstrString, __in size_t size)
-	{
-		if(size>UINT_MAX)
-		{
-			// API only allows DWORD size
-			AtlThrow(E_INVALIDARG);
-		}
-		DWORD dwSize=static_cast<DWORD>(size);
-		BOOL fSuccess=::OemToCharBuffA(pstrString, pstrString, dwSize);
-		if(!fSuccess)
-		{
-			AtlThrowLastWin32();
-		}
+		::OemToAnsi( psz, psz );
 	}
 
-	static void __cdecl FloodCharacters( __in char ch, __in int nLength, __out_ecount_full(nLength) char* pch ) throw()
+	static void __cdecl FloodCharacters( char ch, int nLength, char* pch ) throw()
 	{
 		// nLength is in XCHARs
 		memset( pch, ch, nLength );
 	}
 
-	static BSTR __cdecl AllocSysString( __in_ecount(nDataLength) const char* pchData, int nDataLength ) throw()
+	static BSTR __cdecl AllocSysString( const char* pchData, int nDataLength ) throw()
 	{
 		int nLen = ::MultiByteToWideChar( _AtlGetConversionACP(), 0, pchData, nDataLength,
 			NULL, NULL );
@@ -593,7 +483,7 @@
 		return bstr;
 	}
 
-	static BOOL __cdecl ReAllocSysString( __in_ecount(nDataLength) const char* pchData, __out BSTR* pbstr, __in int nDataLength ) throw()
+	static BOOL __cdecl ReAllocSysString( const char* pchData, BSTR* pbstr, int nDataLength ) throw()
 	{
 		int nLen = ::MultiByteToWideChar( _AtlGetConversionACP(), 0, pchData, nDataLength, NULL, NULL );
 		BOOL bSuccess = ::SysReAllocStringLen( pbstr, NULL, nLen );
@@ -605,50 +495,41 @@
 		return bSuccess;
 	}
 
-	static DWORD __cdecl _AFX_FUNCNAME(FormatMessage)( __in DWORD dwFlags, LPCVOID pSource,
-		__in DWORD dwMessageID, __in DWORD dwLanguageID, __out_ecount(nSize) LPSTR pszBuffer,
+	static DWORD __cdecl FormatMessage( DWORD dwFlags, LPCVOID pSource,
+		DWORD dwMessageID, DWORD dwLanguageID, LPSTR pszBuffer,
 		DWORD nSize, va_list* pArguments ) throw()
 	{
 		return ::FormatMessageA( dwFlags, pSource, dwMessageID, dwLanguageID,
 				pszBuffer, nSize, pArguments );
 	}
 
-#if defined(_AFX)
-	static DWORD __cdecl FormatMessage( __in DWORD dwFlags, LPCVOID pSource,
-		__in DWORD dwMessageID, __in DWORD dwLanguageID, __out_ecount(nSize) LPSTR pszBuffer,
-		DWORD nSize, va_list* pArguments ) throw()
-	{
-		return _AFX_FUNCNAME(FormatMessage)(dwFlags, pSource, dwMessageID, dwLanguageID, pszBuffer, nSize, pArguments);
-	}
-#endif
-
-	static int __cdecl SafeStringLen( __in_z_opt LPCSTR psz ) throw()
+	static int __cdecl SafeStringLen( LPCSTR psz ) throw()
 	{
 		// returns length in bytes
 		return (psz != NULL) ? int( strlen( psz ) ) : 0;
 	}
 
-	static int __cdecl SafeStringLen( __in_z_opt LPCWSTR psz ) throw()
+	static int __cdecl SafeStringLen( LPCWSTR psz ) throw()
 	{
 		// returns length in wchar_ts
 		return (psz != NULL) ? int( wcslen( psz ) ) : 0;
 	}
 
-	static int __cdecl GetCharLen( __in_z const wchar_t* pch ) throw()
+	static int __cdecl GetCharLen( const wchar_t* pch ) throw()
 	{
 		(void)pch;
 		// returns char length
 		return 1;
 	}
 
-	static int __cdecl GetCharLen( __in_z const char* pch ) throw()
+	static int __cdecl GetCharLen( const char* pch ) throw()
 	{
 		// returns char length
 		return int( _mbclen( reinterpret_cast< const unsigned char* >( pch ) ) );
 	}
 
-	static DWORD __cdecl GetEnvironmentVariable( __in_z LPCSTR pszVar,
-		__out_ecount_opt(dwSize) LPSTR pszBuffer, __in DWORD dwSize ) throw()
+	static DWORD __cdecl GetEnvironmentVariable( LPCSTR pszVar,
+		LPSTR pszBuffer, DWORD dwSize ) throw()
 	{
 		return ::GetEnvironmentVariableA( pszVar, pszBuffer, dwSize );
 	}
@@ -660,188 +541,155 @@
 	public ChTraitsBase< wchar_t >
 {
 #if defined(_UNICODE) && !defined(_CSTRING_ALWAYS_THUNK)
-	static DWORD __cdecl _GetEnvironmentVariableW( __in_z LPCWSTR pszName, __out_ecount_part_opt(nSize, return) LPWSTR pszBuffer, __in DWORD nSize ) throw()
+	static DWORD __cdecl _GetEnvironmentVariableW( LPCWSTR pszName, LPWSTR pszBuffer, DWORD nSize ) throw()
 	{
 		return ::GetEnvironmentVariableW( pszName, pszBuffer, nSize );
 	}
 #else  // !_UNICODE
-	static DWORD WINAPI _GetEnvironmentVariableW( __in_z LPCWSTR pszName, 
-		__out_ecount_part_opt(nSize,return) LPWSTR pszBuffer, __in DWORD nSize ) throw()
+	static DWORD WINAPI _GetEnvironmentVariableW( LPCWSTR pszName, 
+		LPWSTR pszBuffer, DWORD nSize ) throw()
 	{
 		return _strthunks.pfnGetEnvironmentVariableW( pszName, pszBuffer, nSize );
 	}
 #endif  // !_UNICODE
 
 public:
-	static LPWSTR __cdecl CharNext( __in_z LPCWSTR psz ) throw()
+	static LPWSTR __cdecl CharNext( LPCWSTR psz ) throw()
 	{
 		return const_cast< LPWSTR >( psz+1 );
 	}
 
-	static int __cdecl IsDigit( __in wchar_t ch ) throw()
+	static int __cdecl IsDigit( wchar_t ch ) throw()
 	{
-		return iswdigit( static_cast<unsigned short>(ch) );
+		return iswdigit( ch );
 	}
 
-	static int __cdecl IsSpace( __in wchar_t ch ) throw()
+	static int __cdecl IsSpace( wchar_t ch ) throw()
 	{
-		return iswspace( static_cast<unsigned short>(ch) );
+		return iswspace( ch );
 	}
 
-	static int __cdecl StringCompare( __in_z LPCWSTR pszA, __in_z LPCWSTR pszB ) throw()
+	static int __cdecl StringCompare( LPCWSTR pszA, LPCWSTR pszB ) throw()
 	{
 		return wcscmp( pszA, pszB );
 	}
 
-	static int __cdecl StringCompareIgnore( __in_z LPCWSTR pszA, __in_z LPCWSTR pszB ) throw()
+	static int __cdecl StringCompareIgnore( LPCWSTR pszA, LPCWSTR pszB ) throw()
 	{
 		return _wcsicmp( pszA, pszB );
 	}
 
-	static int __cdecl StringCollate( __in_z LPCWSTR pszA, __in_z LPCWSTR pszB ) throw()
+	static int __cdecl StringCollate( LPCWSTR pszA, LPCWSTR pszB ) throw()
 	{
 		return wcscoll( pszA, pszB );
 	}
 
-	static int __cdecl StringCollateIgnore( __in_z LPCWSTR pszA, __in_z LPCWSTR pszB ) throw()
+	static int __cdecl StringCollateIgnore( LPCWSTR pszA, LPCWSTR pszB ) throw()
 	{
 		return _wcsicoll( pszA, pszB );
 	}
 
-	static LPCWSTR __cdecl StringFindString( __in_z LPCWSTR pszBlock, __in_z LPCWSTR pszMatch ) throw()
+	static LPCWSTR __cdecl StringFindString( LPCWSTR pszBlock, LPCWSTR pszMatch ) throw()
 	{
 		return wcsstr( pszBlock, pszMatch );
 	}
 
-	static LPWSTR __cdecl StringFindString( __in_z LPWSTR pszBlock, __in_z LPCWSTR pszMatch ) throw()
+	static LPWSTR __cdecl StringFindString( LPWSTR pszBlock, LPCWSTR pszMatch ) throw()
 	{
 		return( const_cast< LPWSTR >( StringFindString( const_cast< LPCWSTR >( pszBlock ), pszMatch ) ) );
 	}
 
-	static LPCWSTR __cdecl StringFindChar( __in_z LPCWSTR pszBlock, __in wchar_t chMatch ) throw()
+	static LPCWSTR __cdecl StringFindChar( LPCWSTR pszBlock, wchar_t chMatch ) throw()
 	{
 		return wcschr( pszBlock, chMatch );
 	}
 
-	static LPCWSTR __cdecl StringFindCharRev( __in_z LPCWSTR psz, __in wchar_t ch ) throw()
+	static LPCWSTR __cdecl StringFindCharRev( LPCWSTR psz, wchar_t ch ) throw()
 	{
 		return wcsrchr( psz, ch );
 	}
 
-	static LPCWSTR __cdecl StringScanSet( __in_z LPCWSTR pszBlock, __in_z LPCWSTR pszMatch ) throw()
+	static LPCWSTR __cdecl StringScanSet( LPCWSTR pszBlock, LPCWSTR pszMatch ) throw()
 	{
 		return wcspbrk( pszBlock, pszMatch );
 	}
 
-	static int __cdecl StringSpanIncluding( __in_z LPCWSTR pszBlock, __in_z LPCWSTR pszSet ) throw()
+	static int __cdecl StringSpanIncluding( LPCWSTR pszBlock, LPCWSTR pszSet ) throw()
 	{
 		return (int)wcsspn( pszBlock, pszSet );
 	}
 
-	static int __cdecl StringSpanExcluding( __in_z LPCWSTR pszBlock, __in_z LPCWSTR pszSet ) throw()
+	static int __cdecl StringSpanExcluding( LPCWSTR pszBlock, LPCWSTR pszSet ) throw()
 	{
 		return (int)wcscspn( pszBlock, pszSet );
 	}
 
-	_ATL_INSECURE_DEPRECATE("You must pass an output size to ChTraitsCRT::StringUppercase")
-	static LPWSTR __cdecl StringUppercase( __inout LPWSTR psz ) throw()
+	static LPWSTR __cdecl StringUppercase( LPWSTR psz ) throw()
 	{
 		return _wcsupr( psz );
 	}
 
-	_ATL_INSECURE_DEPRECATE("You must pass an output size to ChTraitsCRT::StringLowercase")
-	static LPWSTR __cdecl StringLowercase( __inout LPWSTR psz ) throw()
-	{
-		return _wcslwr( psz );
-	}
-
-	static LPWSTR __cdecl StringUppercase( __inout_ecount(size) LPWSTR psz, __in size_t size ) throw()
-	{
-#if _SECURE_ATL
-		errno_t err = _wcsupr_s( psz, size );
-		return (err == 0) ? psz : NULL;
-#else
-		size;
-		return _wcsupr( psz );
-#endif
-	}
-
-	static LPWSTR __cdecl StringLowercase( __inout_ecount(size) LPWSTR psz, __in size_t size ) throw()
+	static LPWSTR __cdecl StringLowercase( LPWSTR psz ) throw()
 	{
-#if _SECURE_ATL
-		errno_t err = _wcslwr_s( psz, size );
-		return (err == 0) ? psz : NULL;
-#else
-		size;
 		return _wcslwr( psz );
-#endif
 	}
 
-	static LPWSTR __cdecl StringReverse( __inout LPWSTR psz ) throw()
+	static LPWSTR __cdecl StringReverse( LPWSTR psz ) throw()
 	{
 		return _wcsrev( psz );
 	}
 
-	static int __cdecl GetFormattedLength( __in __format_string LPCWSTR pszFormat, va_list args) throw()
+	static int __cdecl GetFormattedLength( LPCWSTR pszFormat, va_list args) throw()
 	{
 		return _vscwprintf( pszFormat, args );
 	}
 
-	_ATL_INSECURE_DEPRECATE("You must pass an output size to ChTraitsCRT::Format")
-	static int __cdecl Format( __out LPWSTR pszBuffer, __in __format_string LPCWSTR pszFormat, va_list args) throw()
-	{
-		#pragma prefast(push)
-		#pragma prefast(disable:__WARNING_BANNED_API_USAGE, "Deprecated function replaced by buffer-length version")
-		return vswprintf( pszBuffer, pszFormat, args );
-		#pragma prefast (pop)
-	}
-	static int __cdecl Format
-		( __out_ecount(nLength) LPWSTR pszBuffer, __in size_t nLength, __in __format_string LPCWSTR pszFormat, va_list args) throw()
+	static int __cdecl Format( LPWSTR pszBuffer, LPCWSTR pszFormat, va_list args) throw()
 	{
-		return vswprintf_s( pszBuffer, nLength, pszFormat, args );
+		return vswprintf( pszBuffer, pszFormat, args );				
 	}
 
-	static int __cdecl GetBaseTypeLength( __in_z LPCSTR pszSrc ) throw()
+	static int __cdecl GetBaseTypeLength( LPCSTR pszSrc ) throw()
 	{
 		// Returns required buffer size in wchar_ts
 		return ::MultiByteToWideChar( _AtlGetConversionACP(), 0, pszSrc, -1, NULL, 0 )-1;
 	}
 
-	static int __cdecl GetBaseTypeLength( __in_ecount(nLength) LPCSTR pszSrc, __in int nLength ) throw()
+	static int __cdecl GetBaseTypeLength( LPCSTR pszSrc, int nLength ) throw()
 	{
 		// Returns required buffer size in wchar_ts
 		return ::MultiByteToWideChar( _AtlGetConversionACP(), 0, pszSrc, nLength, NULL, 0 );
 	}
 
-	static int __cdecl GetBaseTypeLength( __in_z LPCWSTR pszSrc ) throw()
+	static int __cdecl GetBaseTypeLength( LPCWSTR pszSrc ) throw()
 	{
 		// Returns required buffer size in wchar_ts
 		return (int)wcslen( pszSrc );
 	}
 
-	static int __cdecl GetBaseTypeLength( __in_ecount(nLength) LPCWSTR pszSrc, __in int nLength ) throw()
+	static int __cdecl GetBaseTypeLength( LPCWSTR pszSrc, int nLength ) throw()
 	{
 		(void)pszSrc;
 		// Returns required buffer size in wchar_ts
 		return nLength;
 	}
 
-	static void __cdecl ConvertToBaseType( __out_ecount(nDestLength) LPWSTR pszDest, __in int nDestLength,
-		__in_z LPCSTR pszSrc, __in int nSrcLength = -1) throw()
+	static void __cdecl ConvertToBaseType( LPWSTR pszDest, int nDestLength,
+		LPCSTR pszSrc, int nSrcLength = -1) throw()
 	{
 		// nLen is in wchar_ts
 		::MultiByteToWideChar( _AtlGetConversionACP(), 0, pszSrc, nSrcLength, pszDest, nDestLength );
 	}
 
-	static void __cdecl ConvertToBaseType( __out_ecount(nDestLength) LPWSTR pszDest, __in int nDestLength,
-		__in_z LPCWSTR pszSrc, int nSrcLength = -1 ) throw()
-	{		
-		if (nSrcLength == -1) { nSrcLength=1 + GetBaseTypeLength(pszSrc); }
+	static void __cdecl ConvertToBaseType( LPWSTR pszDest, int nDestLength,
+		LPCWSTR pszSrc, int nSrcLength = -1) throw()
+	{
+		(void)nSrcLength;
 		// nLen is in wchar_ts
-		Checked::wmemcpy_s(pszDest, nDestLength, pszSrc, nSrcLength);
+		memcpy( pszDest, pszSrc, nDestLength*sizeof( wchar_t ) );
 	}
 
-	static void __cdecl FloodCharacters( __in wchar_t ch, __in int nLength, __out_ecount_full(nLength) LPWSTR psz ) throw()
+	static void __cdecl FloodCharacters( wchar_t ch, int nLength, LPWSTR psz ) throw()
 	{
 		// nLength is in XCHARs
 		for( int i = 0; i < nLength; i++ )
@@ -850,105 +698,55 @@
 		}
 	}
 
-	static BSTR __cdecl AllocSysString( __in_ecount(nDataLength) const wchar_t* pchData, __in int nDataLength ) throw()
+	static BSTR __cdecl AllocSysString( const wchar_t* pchData, int nDataLength ) throw()
 	{
 		return ::SysAllocStringLen( pchData, nDataLength );
 	}
 
-	static BOOL __cdecl ReAllocSysString( __in_ecount(nDataLength) const wchar_t* pchData, __inout BSTR* pbstr, __in int nDataLength ) throw()
+	static BOOL __cdecl ReAllocSysString( const wchar_t* pchData, BSTR* pbstr, int nDataLength ) throw()
 	{
 		return ::SysReAllocStringLen( pbstr, pchData, nDataLength );
 	}
 
-	static int __cdecl SafeStringLen( __in_z_opt LPCSTR psz ) throw()
+#ifdef _UNICODE
+	static DWORD __cdecl FormatMessage( DWORD dwFlags, LPCVOID pSource,
+		DWORD dwMessageID, DWORD dwLanguageID, LPWSTR pszBuffer,
+		DWORD nSize, va_list* pArguments ) throw()
+	{
+		return ::FormatMessageW( dwFlags, pSource, dwMessageID, dwLanguageID,
+				pszBuffer, nSize, pArguments );
+	}
+#endif
+
+	static int __cdecl SafeStringLen( LPCSTR psz ) throw()
 	{
 		// returns length in bytes
 		return (psz != NULL) ? (int)strlen( psz ) : 0;
 	}
 
-	static int __cdecl SafeStringLen( __in_opt LPCWSTR psz ) throw()
+	static int __cdecl SafeStringLen( LPCWSTR psz ) throw()
 	{
 		// returns length in wchar_ts
 		return (psz != NULL) ? (int)wcslen( psz ) : 0;
 	}
 
-	static int __cdecl GetCharLen( __in_z const wchar_t* pch ) throw()
+	static int __cdecl GetCharLen( const wchar_t* pch ) throw()
 	{
 		(void)pch;
 		// returns char length
 		return 1;
 	}
 
-	static int __cdecl GetCharLen( __in_z const char* pch ) throw()
+	static int __cdecl GetCharLen( const char* pch ) throw()
 	{
 		// returns char length
 		return (int)( _mbclen( reinterpret_cast< const unsigned char* >( pch ) ) );
 	}
 
-	static DWORD __cdecl GetEnvironmentVariable( __in_z LPCWSTR pszVar, __out_ecount_opt(dwSize) LPWSTR pszBuffer, __in DWORD dwSize ) throw()
+	static DWORD __cdecl GetEnvironmentVariable( LPCWSTR pszVar, LPWSTR pszBuffer, DWORD dwSize ) throw()
 	{
 		return _GetEnvironmentVariableW( pszVar, pszBuffer, dwSize );
 	}
-
-	static void __cdecl ConvertToOem( __reserved LPWSTR /*psz*/ )
-	{
-//		ATLENSURE(FALSE); // Unsupported Feature 
-	}
-
-	static void __cdecl ConvertToAnsi( __reserved LPWSTR /*psz*/ )
-	{
-//		ATLENSURE(FALSE); // Unsupported Feature 
-	}
-
-	static void __cdecl ConvertToOem( __reserved LPWSTR /*psz*/, size_t )
-	{
-		ATLENSURE(FALSE); // Unsupported Feature 
-	}
-
-	static void __cdecl ConvertToAnsi( __reserved LPWSTR /*psz*/, size_t ) 
-	{
-		ATLENSURE(FALSE); // Unsupported Feature 
-	}
-
-#ifdef _UNICODE
-public:
-	static DWORD __cdecl _AFX_FUNCNAME(FormatMessage)( __in DWORD dwFlags, LPCVOID pSource,
-		__in DWORD dwMessageID, __in DWORD dwLanguageID, __out_ecount(nSize) LPWSTR pszBuffer,
-		__in DWORD nSize, va_list* pArguments ) throw()
-	{
-		return ::FormatMessageW( dwFlags, pSource, dwMessageID, dwLanguageID,
-				pszBuffer, nSize, pArguments );
-	}
-
-#if defined(_AFX)
-	static DWORD __cdecl FormatMessage( __in DWORD dwFlags, LPCVOID pSource,
-		__in DWORD dwMessageID, __in DWORD dwLanguageID, __out_ecount(nSize) LPWSTR pszBuffer,
-		__in DWORD nSize, va_list* pArguments ) throw()
-	{
-		return _AFX_FUNCNAME(FormatMessage)(dwFlags, pSource, dwMessageID, dwLanguageID, pszBuffer, nSize, pArguments);
-	}
-#endif
-
-#else
-	static DWORD __cdecl _AFX_FUNCNAME(FormatMessage)( DWORD /*dwFlags*/, LPCVOID /*pSource*/,
-		DWORD /*dwMessageID*/, DWORD /*dwLanguageID*/, __reserved LPWSTR /*pszBuffer*/,
-		DWORD /*nSize*/, va_list* /*pArguments*/ )
-	{
-//		ATLENSURE(FALSE); // Unsupported Feature 
-		return 0;
-	}
-
-#if defined(_AFX)
-	static DWORD __cdecl FormatMessage( DWORD dwFlags, LPCVOID pSource,
-		DWORD dwMessageID, DWORD dwLanguageID, __reserved LPWSTR pszBuffer,
-		DWORD nSize, va_list* pArguments )
-	{
-		return _AFX_FUNCNAME(FormatMessage)(dwFlags, pSource, dwMessageID, dwLanguageID, pszBuffer, nSize, pArguments);
-	}
-#endif
-
-#endif
-
 };
 #endif  // _ATL_MIN_CRT
 
@@ -984,13 +782,6 @@
 #endif	// _ATL_MIN_CRT
 }
 
-// The CStringT class has a few varargs member functions that will cause 4793
-// warnings if compiled /clr. Because of the way template classes are parsed,
-// we need to disable the warning for the entire class.
-//#pragma warning( push )
-//#pragma warning( disable : 4793 )
-
-
 template< typename BaseType, class StringTraits >
 class CStringT :
 	public CSimpleStringT< BaseType, _CSTRING_IMPL_::_MFCDLLTraitsCheck<BaseType, StringTraits>::c_bIsMFCDLLTraits >
@@ -998,12 +789,6 @@
 public:
 	typedef CSimpleStringT< BaseType, _CSTRING_IMPL_::_MFCDLLTraitsCheck<BaseType, StringTraits>::c_bIsMFCDLLTraits > CThisSimpleString;
 	typedef StringTraits StrTraits;
-	typedef typename CThisSimpleString::XCHAR XCHAR;
-	typedef typename CThisSimpleString::PXSTR PXSTR;
-	typedef typename CThisSimpleString::PCXSTR PCXSTR;
-	typedef typename CThisSimpleString::YCHAR YCHAR;
-	typedef typename CThisSimpleString::PYSTR PYSTR;
-	typedef typename CThisSimpleString::PCYSTR PCYSTR;
 
 public:
 	CStringT() throw() :
@@ -1035,12 +820,12 @@
 		return *(CSimpleStringT<BaseType, !_CSTRING_IMPL_::_MFCDLLTraitsCheck<BaseType, StringTraits>::c_bIsMFCDLLTraits >*)this;
 	}
 	template <bool bMFCDLL>
-	CStringT( __in const CSimpleStringT<BaseType, bMFCDLL>& strSrc ) :
+	CStringT( const CSimpleStringT<BaseType, bMFCDLL>& strSrc ) :
 		CThisSimpleString( strSrc )
 	{
 	}
 
-	CStringT( __in const XCHAR* pszSrc ) :
+	CStringT( const XCHAR* pszSrc ) :
 		CThisSimpleString( StringTraits::GetDefaultManager() )
 	{
 		if( !CheckImplicitLoad( pszSrc ) )
@@ -1050,7 +835,7 @@
 		}
 	}
 
-	CStringT( __in_z LPCSTR pszSrc, __in IAtlStringMgr* pStringMgr ) :
+	CStringT( LPCSTR pszSrc, IAtlStringMgr* pStringMgr ) :
 		CThisSimpleString( pStringMgr )
 	{
 		if( !CheckImplicitLoad( pszSrc ) )
@@ -1060,7 +845,7 @@
 		}
 	}
 
-	CSTRING_EXPLICIT CStringT( __in const YCHAR* pszSrc ) :
+	CSTRING_EXPLICIT CStringT( const YCHAR* pszSrc ) :
 		CThisSimpleString( StringTraits::GetDefaultManager() )
 	{
 		if( !CheckImplicitLoad( pszSrc ) )
@@ -1069,7 +854,7 @@
 		}
 	}
 
-	CStringT( __in_z LPCWSTR pszSrc, __in IAtlStringMgr* pStringMgr ) :
+	CStringT( LPCWSTR pszSrc, IAtlStringMgr* pStringMgr ) :
 		CThisSimpleString( pStringMgr )
 	{
 		if( !CheckImplicitLoad( pszSrc ) )
@@ -1078,27 +863,18 @@
 		}
 	}
 
-#if defined(__cplusplus_cli)
-
-	template <class SystemString>
-	CStringT( SystemString^ pString ) :
-		CThisSimpleString( StringTraits::GetDefaultManager() )
-	{
-		pin_ptr<const System::Char> pChar = PtrToStringChars( pString );
-		const wchar_t *psz = pChar;
-		*this = psz;
-	}
+#ifdef _MANAGED
 
-#elif defined(_MANAGED)
+	// This template will compile only for
+	// class SystemString == System::String
 
 	template<class SystemString>
-	CStringT( SystemString __gc* pString ) :
+	CStringT( SystemString * pString ) :
 		CThisSimpleString( StringTraits::GetDefaultManager() )
-	{		
+	{
 		const wchar_t __pin* psz = PtrToStringChars( pString );
 		*this = psz;
 	}
-
 #endif
 
 	CSTRING_EXPLICIT CStringT( const unsigned char* pszSrc ) :
@@ -1106,49 +882,14 @@
 	{
 		*this = reinterpret_cast< const char* >( pszSrc );
 	}
-//ctors to prevent from oldSyntax template ctor (above) hijack certain types.
-//MFC dll instantiate all CStringT methods inside the dll and declares dllimport for 
-//all methods in user build (see afxstr.h), so need to include the methods in MFC dll builds.
-#if defined(_AFXDLL) && defined(_MFC_DLL_BLD) || !defined(__cplusplus_cli) && defined(_MANAGED)
-
-	/*CSTRING_EXPLICIT*/ CStringT( __in_z char* pszSrc ) :
-		CThisSimpleString( StringTraits::GetDefaultManager() )
-	{
-		const char *psz = reinterpret_cast< const char* >( pszSrc );
-		if (!CheckImplicitLoad( psz ))
-		{
-			*this = psz;
-		}
-	}
-
-	CSTRING_EXPLICIT CStringT( __in unsigned char* pszSrc ) :
-		CThisSimpleString( StringTraits::GetDefaultManager() )
-	{
-		const char *psz = reinterpret_cast< const char* >( pszSrc );
-		if (!CheckImplicitLoad( psz ))
-		{
-			*this = psz;
-		}
-	}
-
-	CSTRING_EXPLICIT CStringT( __in_z wchar_t* pszSrc ) :
-		CThisSimpleString( StringTraits::GetDefaultManager() )
-	{
-		const wchar_t *psz = reinterpret_cast< const wchar_t* >( pszSrc );
-		if (!CheckImplicitLoad( psz ))
-		{
-			*this = psz;
-		}
-	}
-#endif
 
-	CStringT( __in const unsigned char* pszSrc, __in IAtlStringMgr* pStringMgr ) :
+	CStringT( const unsigned char* pszSrc, IAtlStringMgr* pStringMgr ) :
 		CThisSimpleString( pStringMgr )
 	{
 		*this = reinterpret_cast< const char* >( pszSrc );
 	}
 
-	CSTRING_EXPLICIT CStringT( __in char ch, __in int nLength = 1 ) :
+	CSTRING_EXPLICIT CStringT( char ch, int nLength = 1 ) :
 		CThisSimpleString( StringTraits::GetDefaultManager() )
 	{
 		ATLASSERT( nLength >= 0 );
@@ -1160,56 +901,29 @@
 		}
 	}
 
-	CSTRING_EXPLICIT CStringT( __in wchar_t ch, __in int nLength = 1 ) :
+	CSTRING_EXPLICIT CStringT( wchar_t ch, int nLength = 1 ) :
 		CThisSimpleString( StringTraits::GetDefaultManager() )
 	{
 		ATLASSERT( nLength >= 0 );
 		if( nLength > 0 )
-		{			
-			//Convert ch to the BaseType
-			wchar_t pszCh[2] = { ch , 0 };
-			int nBaseTypeCharLen = 1;
-
-			if(ch != L'\0')
-			{
-				nBaseTypeCharLen = StringTraits::GetBaseTypeLength(pszCh);
-			}
-
-			CTempBuffer<XCHAR,10> buffBaseTypeChar;			
-			buffBaseTypeChar.Allocate(nBaseTypeCharLen+1);
-			StringTraits::ConvertToBaseType( buffBaseTypeChar, nBaseTypeCharLen+1, pszCh, 1 );
-			//Allocate enough characters in String and flood (replicate) with the (converted character)*nLength
-			PXSTR pszBuffer = GetBuffer( nLength*nBaseTypeCharLen );
-			if (nBaseTypeCharLen == 1)
-			{   //Optimization for a common case - wide char translates to 1 ansi/wide char.
-				StringTraits::FloodCharacters( buffBaseTypeChar[0], nLength, pszBuffer );				
-			} else
-			{
-				XCHAR* p=pszBuffer;
-				for (int i=0 ; i < nLength ;++i)
-				{
-					for (int j=0 ; j < nBaseTypeCharLen ;++j)
-					{	
-						*p=buffBaseTypeChar[j];
-						++p;
-					}
-				}
-			}
-			ReleaseBufferSetLength( nLength*nBaseTypeCharLen );			
+		{
+			PXSTR pszBuffer = GetBuffer( nLength );
+			StringTraits::FloodCharacters( XCHAR( ch ), nLength, pszBuffer );
+			ReleaseBufferSetLength( nLength );
 		}
 	}
 
-	CStringT( __in_ecount(nLength) const XCHAR* pch, __in int nLength ) :
+	CStringT( const XCHAR* pch, int nLength ) :
 		CThisSimpleString( pch, nLength, StringTraits::GetDefaultManager() )
 	{
 	}
 
-	CStringT( __in_ecount(nLength) const XCHAR* pch, __in int nLength, __in IAtlStringMgr* pStringMgr ) :
+	CStringT( const XCHAR* pch, int nLength, IAtlStringMgr* pStringMgr ) :
 		CThisSimpleString( pch, nLength, pStringMgr )
 	{
 	}
 
-	CStringT( __in_ecount(nLength) const YCHAR* pch, __in int nLength ) :
+	CStringT( const YCHAR* pch, int nLength ) :
 		CThisSimpleString( StringTraits::GetDefaultManager() )
 	{
 		ATLASSERT( nLength >= 0 );
@@ -1226,7 +940,7 @@
 		}
 	}
 
-	CStringT( __in_ecount(nLength) const YCHAR* pch, __in int nLength, __in IAtlStringMgr* pStringMgr ) :
+	CStringT( const YCHAR* pch, int nLength, IAtlStringMgr* pStringMgr ) :
 		CThisSimpleString( pStringMgr )
 	{
 		ATLASSERT( nLength >= 0 );
@@ -1249,7 +963,7 @@
 	}
 
 	// Assignment operators
-	CStringT& operator=( __in const CStringT& strSrc )
+	CStringT& operator=( const CStringT& strSrc )
 	{
 		CThisSimpleString::operator=( strSrc );
 
@@ -1257,28 +971,28 @@
 	}
 	
 	template <bool bMFCDLL>
-	CStringT& operator=( __in const CSimpleStringT<BaseType, bMFCDLL>& strSrc )
+	CStringT& operator=( const CSimpleStringT<BaseType, bMFCDLL>& strSrc )
 	{
 		CThisSimpleString::operator=( strSrc );
 
 		return( *this );
 	}
 
-	CStringT& operator=( __in PCXSTR pszSrc )
+	CStringT& operator=( PCXSTR pszSrc )
 	{
 		CThisSimpleString::operator=( pszSrc );
 
 		return( *this );
 	}
 
-	CStringT& operator=( __in PCYSTR pszSrc )
+	CStringT& operator=( PCYSTR pszSrc )
 	{
 		// nDestLength is in XCHARs
 		int nDestLength = (pszSrc != NULL) ? StringTraits::GetBaseTypeLength( pszSrc ) : 0;
 		if( nDestLength > 0 )
 		{
 			PXSTR pszBuffer = GetBuffer( nDestLength );
-			StringTraits::ConvertToBaseType( pszBuffer, nDestLength, pszSrc);
+			StringTraits::ConvertToBaseType( pszBuffer, nDestLength, pszSrc );
 			ReleaseBufferSetLength( nDestLength );
 		}
 		else
@@ -1289,115 +1003,105 @@
 		return( *this );
 	}
 
-	CStringT& operator=( __in const unsigned char* pszSrc )
+	CStringT& operator=( const unsigned char* pszSrc )
 	{
 		return( operator=( reinterpret_cast< const char* >( pszSrc ) ) );
 	}
 
-	CStringT& operator=( __in char ch )
+	CStringT& operator=( char ch )
 	{
 		char ach[2] = { ch, 0 };
 
 		return( operator=( ach ) );
 	}
 
-	CStringT& operator=( __in wchar_t ch )
+	CStringT& operator=( wchar_t ch )
 	{
 		wchar_t ach[2] = { ch, 0 };
 
 		return( operator=( ach ) );
 	}
 
-	CStringT& operator=( __in const VARIANT& var );
+	CStringT& operator=( const VARIANT& var );
 
-	CStringT& operator+=( __in const CThisSimpleString& str )
+	CStringT& operator+=( const CThisSimpleString& str )
 	{
 		CThisSimpleString::operator+=( str );
 
 		return( *this );
 	}
 	template <bool bMFCDLL>
-	CStringT& operator+=( __in const CSimpleStringT<BaseType, bMFCDLL>& str )
+	CStringT& operator+=( const CSimpleStringT<BaseType, bMFCDLL>& str )
 	{
 		CThisSimpleString::operator+=( str );
 
 		return( *this );
 	}
 	
-	CStringT& operator+=( __in PCXSTR pszSrc )
+	CStringT& operator+=( PCXSTR pszSrc )
 	{
 		CThisSimpleString::operator+=( pszSrc );
 
 		return( *this );
 	}
 	template< int t_nSize >
-	CStringT& operator+=( __in const CStaticString< XCHAR, t_nSize >& strSrc )
+	CStringT& operator+=( const CStaticString< XCHAR, t_nSize >& strSrc )
 	{
 		CThisSimpleString::operator+=( strSrc );
 
 		return( *this );
 	}
-	CStringT& operator+=( __in PCYSTR pszSrc )
+	CStringT& operator+=( PCYSTR pszSrc )
 	{
 		CStringT str( pszSrc, GetManager() );
 
 		return( operator+=( str ) );
 	}
 
-	CStringT& operator+=( __in char ch )
+	CStringT& operator+=( char ch )
 	{
 		CThisSimpleString::operator+=( ch );
 
 		return( *this );
 	}
 
-	CStringT& operator+=( __in unsigned char ch )
+	CStringT& operator+=( unsigned char ch )
 	{
 		CThisSimpleString::operator+=( ch );
 
 		return( *this );
 	}
 
-	CStringT& operator+=( __in wchar_t ch )
+	CStringT& operator+=( wchar_t ch )
 	{
 		CThisSimpleString::operator+=( ch );
 
 		return( *this );
 	}
 
-	CStringT& operator+=( __in const VARIANT& var );
-
-	// Override from base class
-	IAtlStringMgr* GetManager() const throw()
-	{
-		IAtlStringMgr* pStringMgr = CThisSimpleString::GetManager();
-		if(pStringMgr) { return pStringMgr; }
-
-		pStringMgr = StringTraits::GetDefaultManager();
-		return pStringMgr->Clone();
-	}
+	CStringT& operator+=( const VARIANT& var );
 
 	// Comparison
 
-	int Compare( __in PCXSTR psz ) const
+	int Compare( PCXSTR psz ) const throw()
 	{
-		ATLENSURE( AtlIsValidString( psz ) );
+		ATLASSERT( AtlIsValidString( psz ) );
 		return( StringTraits::StringCompare( GetString(), psz ) );
 	}
 
-	int CompareNoCase( __in PCXSTR psz ) const throw()
+	int CompareNoCase( PCXSTR psz ) const throw()
 	{
 		ATLASSERT( AtlIsValidString( psz ) );
 		return( StringTraits::StringCompareIgnore( GetString(), psz ) );
 	}
 
-	int Collate( __in PCXSTR psz ) const throw()
+	int Collate( PCXSTR psz ) const throw()
 	{
 		ATLASSERT( AtlIsValidString( psz ) );
 		return( StringTraits::StringCollate( GetString(), psz ) );
 	}
 
-	int CollateNoCase( __in PCXSTR psz ) const throw()
+	int CollateNoCase( PCXSTR psz ) const throw()
 	{
 		ATLASSERT( AtlIsValidString( psz ) );
 		return( StringTraits::StringCollateIgnore( GetString(), psz ) );
@@ -1406,7 +1110,7 @@
 	// Advanced manipulation
 
 	// Delete 'nCount' characters, starting at index 'iIndex'
-	int Delete( __in int iIndex, __in int nCount = 1 )
+	int Delete( int iIndex, int nCount = 1 )
 	{
 		if( iIndex < 0 )
 			iIndex = 0;
@@ -1415,7 +1119,7 @@
 			nCount = 0;
 
 		int nLength = GetLength();
-		if( (::ATL::AtlAddThrow(nCount, iIndex)) > nLength )
+		if( (nCount+iIndex) > nLength )
 		{
 			nCount = nLength-iIndex;
 		}
@@ -1424,8 +1128,7 @@
 			int nNewLength = nLength-nCount;
 			int nXCHARsToCopy = nLength-(iIndex+nCount)+1;
 			PXSTR pszBuffer = GetBuffer();
-			Checked::memmove_s( pszBuffer+iIndex, nXCHARsToCopy*sizeof( XCHAR ), 
-				pszBuffer+iIndex+nCount, nXCHARsToCopy*sizeof( XCHAR ) );
+			memmove( pszBuffer+iIndex, pszBuffer+iIndex+nCount, nXCHARsToCopy*sizeof( XCHAR ) );
 			ReleaseBufferSetLength( nNewLength );
 		}
 
@@ -1433,7 +1136,7 @@
 	}
 
 	// Insert character 'ch' before index 'iIndex'
-	int Insert( __in int iIndex, __in XCHAR ch )
+	int Insert( int iIndex, XCHAR ch )
 	{
 		if( iIndex < 0 )
 			iIndex = 0;
@@ -1446,9 +1149,8 @@
 
 		PXSTR pszBuffer = GetBuffer( nNewLength );
 
-		// move existing bytes down 
-        Checked::memmove_s( pszBuffer+iIndex+1, (nNewLength-iIndex)*sizeof( XCHAR ), 
-			pszBuffer+iIndex, (nNewLength-iIndex)*sizeof( XCHAR ) );
+		// move existing bytes down
+		memmove( pszBuffer+iIndex+1, pszBuffer+iIndex, (nNewLength-iIndex)*sizeof( XCHAR ) );
 		pszBuffer[iIndex] = ch;
 
 		ReleaseBufferSetLength( nNewLength );
@@ -1457,7 +1159,7 @@
 	}
 
 	// Insert string 'psz' before index 'iIndex'
-	int Insert( __in int iIndex, __in PCXSTR psz )
+	int Insert( int iIndex, PCXSTR psz )
 	{
 		if( iIndex < 0 )
 			iIndex = 0;
@@ -1475,11 +1177,10 @@
 			nNewLength += nInsertLength;
 
 			PXSTR pszBuffer = GetBuffer( nNewLength );
-			// move existing bytes down 
-            Checked::memmove_s( pszBuffer+iIndex+nInsertLength, (nNewLength-iIndex-nInsertLength+1)*sizeof( XCHAR ), 
+			// move existing bytes down
+			memmove( pszBuffer+iIndex+nInsertLength,
 				pszBuffer+iIndex, (nNewLength-iIndex-nInsertLength+1)*sizeof( XCHAR ) );
-			Checked::memcpy_s( pszBuffer+iIndex, nInsertLength*sizeof( XCHAR ), 
-				psz, nInsertLength*sizeof( XCHAR ) );
+			memcpy( pszBuffer+iIndex, psz, nInsertLength*sizeof( XCHAR ) );
 			ReleaseBufferSetLength( nNewLength );
 		}
 
@@ -1487,7 +1188,7 @@
 	}
 
 	// Replace all occurrences of character 'chOld' with character 'chNew'
-	int Replace( __in XCHAR chOld, __in XCHAR chNew )
+	int Replace( XCHAR chOld, XCHAR chNew )
 	{
 		int nCount = 0;
 
@@ -1525,7 +1226,7 @@
 	}
 
 	// Replace all occurrences of string 'pszOld' with string 'pszNew'
-	int Replace( __in PCXSTR pszOld, __in PCXSTR pszNew )
+	int Replace( PCXSTR pszOld, PCXSTR pszNew )
 	{
 		// can't have empty or NULL lpszOld
 
@@ -1561,7 +1262,7 @@
 			int nOldLength = GetLength();
 			int nNewLength = nOldLength+(nReplacementLen-nSourceLen)*nCount;
 
-			PXSTR pszBuffer = GetBuffer( __max( nNewLength, nOldLength ) );
+			PXSTR pszBuffer = GetBuffer( max( nNewLength, nOldLength ) );
 
 			PXSTR pszStart = pszBuffer;
 			PXSTR pszEnd = pszStart+nOldLength;
@@ -1573,10 +1274,9 @@
 				while( (pszTarget = StringTraits::StringFindString( pszStart, pszOld ) ) != NULL )
 				{
 					int nBalance = nOldLength-int(pszTarget-pszBuffer+nSourceLen);
-                    Checked::memmove_s( pszTarget+nReplacementLen, nBalance*sizeof( XCHAR ), 
-						pszTarget+nSourceLen, nBalance*sizeof( XCHAR ) );
-					Checked::memcpy_s( pszTarget, nReplacementLen*sizeof( XCHAR ), 
-						pszNew, nReplacementLen*sizeof( XCHAR ) );
+					memmove( pszTarget+nReplacementLen, pszTarget+nSourceLen, nBalance*sizeof( XCHAR ) );
+
+					memcpy( pszTarget, pszNew, nReplacementLen*sizeof( XCHAR ) );
 					pszStart = pszTarget+nReplacementLen;
 					pszTarget[nReplacementLen+nBalance] = 0;
 					nOldLength += (nReplacementLen-nSourceLen);
@@ -1591,7 +1291,7 @@
 	}
 
 	// Remove all occurrences of character 'chRemove'
-	int Remove( __in XCHAR chRemove )
+	int Remove( XCHAR chRemove )
 	{
 		int nLength = GetLength();
 		PXSTR pszBuffer = GetBuffer( nLength );
@@ -1606,11 +1306,8 @@
 			if( *pszSource != chRemove )
 			{
 				// Copy the source to the destination.  Remember to copy all bytes of an MBCS character
-	   			// Copy the source to the destination.  Remember to copy all bytes of an MBCS character
-				size_t NewSourceGap = (pszNewSource-pszSource);
-				PXSTR pszNewDest = pszDest + NewSourceGap;
-				size_t i = 0;
-				for (i = 0;  pszDest != pszNewDest && i < NewSourceGap; i++)
+				PXSTR pszNewDest = pszDest+(pszNewSource-pszSource);
+				while( pszDest != pszNewDest )
 				{
 					*pszDest = *pszSource;
 					pszSource++;
@@ -1626,40 +1323,35 @@
 		return( nCount );
 	}
 
-	CStringT Tokenize( __in PCXSTR pszTokens, __inout int& iStart ) const
+	CStringT Tokenize( PCXSTR pszTokens, int& iStart ) const
 	{
 		ATLASSERT( iStart >= 0 );
 			
 		if(iStart < 0)
 			AtlThrow(E_INVALIDARG);			
 			
-		if( (pszTokens == NULL) || (*pszTokens == (XCHAR)0) )
+		if( pszTokens == NULL )
 		{
-			if (iStart < GetLength())
-			{
-				return( CStringT( GetString()+iStart, GetManager() ) );
-			}
+			return( *this );
 		}
-		else
+
+		PCXSTR pszPlace = GetString()+iStart;
+		PCXSTR pszEnd = GetString()+GetLength();
+		if( pszPlace < pszEnd )
 		{
-			PCXSTR pszPlace = GetString()+iStart;
-			PCXSTR pszEnd = GetString()+GetLength();
-			if( pszPlace < pszEnd )
-			{
-				int nIncluding = StringTraits::StringSpanIncluding( pszPlace,
-					pszTokens );
+			int nIncluding = StringTraits::StringSpanIncluding( pszPlace,
+				pszTokens );
 
-				if( (pszPlace+nIncluding) < pszEnd )
-				{
-					pszPlace += nIncluding;
-					int nExcluding = StringTraits::StringSpanExcluding( pszPlace, pszTokens );
+			if( (pszPlace+nIncluding) < pszEnd )
+			{
+				pszPlace += nIncluding;
+				int nExcluding = StringTraits::StringSpanExcluding( pszPlace, pszTokens );
 
-					int iFrom = iStart+nIncluding;
-					int nUntil = nExcluding;
-					iStart = iFrom+nUntil+1;
+				int iFrom = iStart+nIncluding;
+				int nUntil = nExcluding;
+				iStart = iFrom+nUntil+1;
 
-					return( Mid( iFrom, nUntil ) );
-				}
+				return( Mid( iFrom, nUntil ) );
 			}
 		}
 
@@ -1672,7 +1364,7 @@
 	// find routines
 
 	// Find the first occurrence of character 'ch', starting at index 'iStart'
-	int Find( __in XCHAR ch, __in int iStart = 0 ) const throw()
+	int Find( XCHAR ch, int iStart = 0 ) const throw()
 	{
 		// iStart is in XCHARs
 		ATLASSERT( iStart >= 0 );
@@ -1694,7 +1386,7 @@
 	// look for a specific sub-string
 
 	// Find the first occurrence of string 'pszSub', starting at index 'iStart'
-	int Find( __in PCXSTR pszSub, __in int iStart = 0 ) const throw()
+	int Find( PCXSTR pszSub, int iStart = 0 ) const throw()
 	{
 		// iStart is in XCHARs
 		ATLASSERT( iStart >= 0 );
@@ -1719,7 +1411,7 @@
 	}
 
 	// Find the first occurrence of any of the characters in string 'pszCharSet'
-	int FindOneOf( __in PCXSTR pszCharSet ) const throw()
+	int FindOneOf( PCXSTR pszCharSet ) const throw()
 	{
 		ATLASSERT( AtlIsValidString( pszCharSet ) );
 		PCXSTR psz = StringTraits::StringScanSet( GetString(), pszCharSet );
@@ -1727,7 +1419,7 @@
 	}
 
 	// Find the last occurrence of character 'ch'
-	int ReverseFind( __in XCHAR ch ) const throw()
+	int ReverseFind( XCHAR ch ) const throw()
 	{
 		// find last single character
 		PCXSTR psz = StringTraits::StringFindCharRev( GetString(), ch );
@@ -1743,7 +1435,7 @@
 	{
 		int nLength = GetLength();
 		PXSTR pszBuffer = GetBuffer( nLength );
-		StringTraits::StringUppercase( pszBuffer, nLength+1 );
+		StringTraits::StringUppercase( pszBuffer );
 		ReleaseBufferSetLength( nLength );
 
 		return( *this );
@@ -1754,7 +1446,7 @@
 	{
 		int nLength = GetLength();
 		PXSTR pszBuffer = GetBuffer( nLength );
-		StringTraits::StringLowercase( pszBuffer, nLength+1 );
+		StringTraits::StringLowercase( pszBuffer );
 		ReleaseBufferSetLength( nLength );
 
 		return( *this );
@@ -1826,8 +1518,7 @@
 			PXSTR pszBuffer = GetBuffer( GetLength() );
 			psz = pszBuffer+iFirst;
 			int nDataLength = GetLength()-iFirst;
-            Checked::memmove_s( pszBuffer, (nDataLength+1)*sizeof( XCHAR ), 
-				psz, (nDataLength+1)*sizeof( XCHAR ) );
+			memmove( pszBuffer, psz, (nDataLength+1)*sizeof( XCHAR ) );
 			ReleaseBufferSetLength( nDataLength );
 		}
 
@@ -1841,13 +1532,13 @@
 	}
 
 	// Remove all leading and trailing occurrences of character 'chTarget'
-	CStringT& Trim( __in XCHAR chTarget )
+	CStringT& Trim( XCHAR chTarget )
 	{
 		return( TrimRight( chTarget ).TrimLeft( chTarget ) );
 	}
 
 	// Remove all leading and trailing occurrences of any of the characters in the string 'pszTargets'
-	CStringT& Trim( __in PCXSTR pszTargets )
+	CStringT& Trim( PCXSTR pszTargets )
 	{
 		return( TrimRight( pszTargets ).TrimLeft( pszTargets ) );
 	}
@@ -1855,7 +1546,7 @@
 	// trimming anything (either side)
 
 	// Remove all trailing occurrences of character 'chTarget'
-	CStringT& TrimRight( __in XCHAR chTarget )
+	CStringT& TrimRight( XCHAR chTarget )
 	{
 		// find beginning of trailing matches
 		// by starting at beginning (DBCS aware)
@@ -1890,7 +1581,7 @@
 	}
 
 	// Remove all trailing occurrences of any of the characters in string 'pszTargets'
-	CStringT& TrimRight( __in PCXSTR pszTargets )
+	CStringT& TrimRight( PCXSTR pszTargets )
 	{
 		// if we're not trimming anything, we're not doing any work
 		if( (pszTargets == NULL) || (*pszTargets == 0) )
@@ -1931,7 +1622,7 @@
 	}
 
 	// Remove all leading occurrences of character 'chTarget'
-	CStringT& TrimLeft( __in XCHAR chTarget )
+	CStringT& TrimLeft( XCHAR chTarget )
 	{
 		// find first non-matching character
 		PCXSTR psz = GetString();
@@ -1948,8 +1639,7 @@
 			PXSTR pszBuffer = GetBuffer( GetLength() );
 			psz = pszBuffer+iFirst;
 			int nDataLength = GetLength()-iFirst;
-            Checked::memmove_s( pszBuffer, (nDataLength+1)*sizeof( XCHAR ), 
-				psz, (nDataLength+1)*sizeof( XCHAR ) );
+			memmove( pszBuffer, psz, (nDataLength+1)*sizeof( XCHAR ) );
 			ReleaseBufferSetLength( nDataLength );
 		}
 
@@ -1957,7 +1647,7 @@
 	}
 
 	// Remove all leading occurrences of any of the characters in string 'pszTargets'
-	CStringT& TrimLeft( __in PCXSTR pszTargets )
+	CStringT& TrimLeft( PCXSTR pszTargets )
 	{
 		// if we're not trimming anything, we're not doing any work
 		if( (pszTargets == NULL) || (*pszTargets == 0) )
@@ -1978,42 +1668,47 @@
 			PXSTR pszBuffer = GetBuffer( GetLength() );
 			psz = pszBuffer+iFirst;
 			int nDataLength = GetLength()-iFirst;
-            Checked::memmove_s( pszBuffer, (nDataLength+1)*sizeof( XCHAR ), 
-				psz, (nDataLength+1)*sizeof( XCHAR ) );
+			memmove( pszBuffer, psz, (nDataLength+1)*sizeof( XCHAR ) );
 			ReleaseBufferSetLength( nDataLength );
 		}
 
 		return( *this );
 	}
 
+__if_exists( StringTraits::ConvertToOem )
+{
 	// Convert the string to the OEM character set
 	void AnsiToOem()
 	{
 		int nLength = GetLength();
 		PXSTR pszBuffer = GetBuffer( nLength );
-		StringTraits::ConvertToOem( pszBuffer, nLength+1 );
+		StringTraits::ConvertToOem( pszBuffer );
 		ReleaseBufferSetLength( nLength );
 	}
+}
 
+__if_exists( StringTraits::ConvertToAnsi )
+{
 	// Convert the string to the ANSI character set
 	void OemToAnsi()
 	{
 		int nLength = GetLength();
 		PXSTR pszBuffer = GetBuffer( nLength );
-		StringTraits::ConvertToAnsi( pszBuffer, nLength+1 );
+		StringTraits::ConvertToAnsi( pszBuffer );
 		ReleaseBufferSetLength( nLength );
 	}
+}
 
 	// Very simple sub-string extraction
 
 	// Return the substring starting at index 'iFirst'
-	CStringT Mid( __in int iFirst ) const
+	CStringT Mid( int iFirst ) const
 	{
 		return( Mid( iFirst, GetLength()-iFirst ) );
 	}
 
 	// Return the substring starting at index 'iFirst', with length 'nCount'
-	CStringT Mid( __in int iFirst, __in int nCount ) const
+	CStringT Mid( int iFirst, int nCount ) const
 	{
 		// nCount is in XCHARs
 
@@ -2023,7 +1718,7 @@
 		if (nCount < 0)
 			nCount = 0;
 
-		if( (::ATL::AtlAddThrow(iFirst,nCount)) > GetLength() )
+		if( (iFirst+nCount) > GetLength() )
 		{
 			nCount = GetLength()-iFirst;
 		}
@@ -2044,16 +1739,13 @@
 	}
 
 	// Return the substring consisting of the rightmost 'nCount' characters
-	CStringT Right( __in int nCount ) const
+	CStringT Right( int nCount ) const
 	{
 		// nCount is in XCHARs
 		if (nCount < 0)
 			nCount = 0;
 
 		int nLength = GetLength();
-		// prefast does not know about GetLength()
-		if (nLength < 0)
-			nLength = 0;
 		if( nCount >= nLength )
 		{
 			return( *this );
@@ -2063,7 +1755,7 @@
 	}
 
 	// Return the substring consisting of the leftmost 'nCount' characters
-	CStringT Left( __in int nCount ) const
+	CStringT Left( int nCount ) const
 	{
 		// nCount is in XCHARs
 		if (nCount < 0)
@@ -2079,7 +1771,7 @@
 	}
 
 	// Return the substring consisting of the leftmost characters in the set 'pszCharSet'
-	CStringT SpanIncluding( __in PCXSTR pszCharSet ) const
+	CStringT SpanIncluding( PCXSTR pszCharSet ) const
 	{
 		ATLASSERT( AtlIsValidString( pszCharSet ) );
 		if(pszCharSet == NULL)
@@ -2089,7 +1781,7 @@
 	}
 
 	// Return the substring consisting of the leftmost characters not in the set 'pszCharSet'
-	CStringT SpanExcluding( __in PCXSTR pszCharSet ) const
+	CStringT SpanExcluding( PCXSTR pszCharSet ) const
 	{
 		ATLASSERT( AtlIsValidString( pszCharSet ) );
 		if(pszCharSet == NULL)
@@ -2099,74 +1791,118 @@
  	}
 
 	// Format data using format string 'pszFormat'
-	void __cdecl Format( __in __format_string PCXSTR pszFormat, ... );
+	void __cdecl Format( PCXSTR pszFormat, ... )
+	{
+		ATLASSERT( AtlIsValidString( pszFormat ) );
+		
+		va_list argList;
+		va_start( argList, pszFormat );
+		FormatV( pszFormat, argList );
+		va_end( argList );
+	}
 
 	// Format data using format string loaded from resource 'nFormatID'
-	void __cdecl Format( __format_string UINT nFormatID, ... );
+	void __cdecl Format( UINT nFormatID, ... )
+	{
+		CStringT strFormat( GetManager() );
+		ATLVERIFY( strFormat.LoadString( nFormatID ) );
+
+		va_list argList;
+		va_start( argList, nFormatID );
+		FormatV( strFormat, argList );
+		va_end( argList );
+	}
 
 	// Append formatted data using format string loaded from resource 'nFormatID'
-	void __cdecl AppendFormat( __in UINT nFormatID, ... );
+	void __cdecl AppendFormat( UINT nFormatID, ... )
+	{
+		va_list argList;
+		va_start( argList, nFormatID );
+
+		CStringT strFormat( GetManager() );
+		ATLVERIFY( strFormat.LoadString( nFormatID ) ); 
+
+		AppendFormatV( strFormat, argList );
+
+		va_end( argList );
+	}
 
 	// Append formatted data using format string 'pszFormat'
-	void __cdecl AppendFormat( __in __format_string PCXSTR pszFormat, ... );
-	void AppendFormatV( __in __format_string PCXSTR pszFormat, va_list args )
+	void __cdecl AppendFormat( PCXSTR pszFormat, ... )
 	{
 		ATLASSERT( AtlIsValidString( pszFormat ) );
 
-		int nCurrentLength = GetLength();
-		int nAppendLength = StringTraits::GetFormattedLength( pszFormat, args );
+		va_list argList;
+		va_start( argList, pszFormat );
 
-		if (nAppendLength == -1)
-			AtlThrow(E_OUTOFMEMORY);
+		AppendFormatV( pszFormat, argList );
+
+		va_end( argList );
+	}
 
+	void AppendFormatV( PCXSTR pszFormat, va_list args )
+	{
+		ATLASSERT( AtlIsValidString( pszFormat ) );
+
+		int nCurrentLength = GetLength();
+		int nAppendLength = StringTraits::GetFormattedLength( pszFormat, args );
 		PXSTR pszBuffer = GetBuffer( nCurrentLength+nAppendLength );
-#if _SECURE_ATL
-        StringTraits::Format( pszBuffer+nCurrentLength, 
-			nAppendLength+1, pszFormat, args );
-#else
 		StringTraits::Format( pszBuffer+nCurrentLength, pszFormat, args );
-#endif
 		ReleaseBufferSetLength( nCurrentLength+nAppendLength );
 	}
 
-	void FormatV( __in __format_string PCXSTR pszFormat, va_list args )
+	void FormatV( PCXSTR pszFormat, va_list args )
 	{
 		ATLASSERT( AtlIsValidString( pszFormat ) );
 		if(pszFormat == NULL)
 			AtlThrow(E_INVALIDARG);
 
 		int nLength = StringTraits::GetFormattedLength( pszFormat, args );
-
-		if (nLength == -1)
-			AtlThrow(E_OUTOFMEMORY);
-
 		PXSTR pszBuffer = GetBuffer( nLength );
-#if _SECURE_ATL
-        StringTraits::Format( pszBuffer, nLength+1, pszFormat, args );
-#else
 		StringTraits::Format( pszBuffer, pszFormat, args );
-#endif
 		ReleaseBufferSetLength( nLength );
 	}
 
+__if_exists(StringTraits::FormatMessage)
+{
 	// Format a message using format string 'pszFormat'
-	void __cdecl _AFX_FUNCNAME(FormatMessage)( __in __format_string PCXSTR pszFormat, ... );
+	void __cdecl FormatMessage( PCXSTR pszFormat, ... )
+	{
+		if(pszFormat == NULL)
+			AtlThrow(E_INVALIDARG);
+
+		va_list argList;
+		va_start( argList, pszFormat );
+
+		FormatMessageV( pszFormat, &argList );
+
+		va_end( argList );
+	}
 
 	// Format a message using format string loaded from resource 'nFormatID'
-	void __cdecl _AFX_FUNCNAME(FormatMessage)( __in UINT nFormatID, ... );
+	void __cdecl FormatMessage( UINT nFormatID, ... )
+	{
+		// get format string from string table
+		CStringT strFormat( GetManager() );
+		ATLVERIFY( strFormat.LoadString( nFormatID ) );
 
-#if defined(_AFX)
-	void __cdecl FormatMessage( __in __format_string PCXSTR pszFormat, ... );
+		if(strFormat.GetLength() == 0)
+			AtlThrow(E_INVALIDARG);
 
-	void __cdecl FormatMessage( __in UINT nFormatID, ... );
-#endif
+		va_list argList;
+		va_start( argList, nFormatID );
+
+		FormatMessageV( strFormat, &argList );
+
+		va_end( argList );
+	}
 
 	// Format a message using format string 'pszFormat' and va_list
-	void FormatMessageV( __in __format_string PCXSTR pszFormat, va_list* pArgList )
+	void FormatMessageV( PCXSTR pszFormat, va_list* pArgList )
 	{
 		// format message into temporary buffer pszTemp
 		CHeapPtr< XCHAR, CLocalAllocator > pszTemp;
-		DWORD dwResult = StringTraits::_AFX_FUNCNAME(FormatMessage)( FORMAT_MESSAGE_FROM_STRING|
+		DWORD dwResult = StringTraits::FormatMessage( FORMAT_MESSAGE_FROM_STRING|
 			FORMAT_MESSAGE_ALLOCATE_BUFFER, pszFormat, 0, 0, reinterpret_cast< PXSTR >( &pszTemp ),
 			0, pArgList );
 		if( dwResult == 0 )
@@ -2176,29 +1912,24 @@
 
 		*this = pszTemp;
 	}
+}
 
 	// OLE BSTR support
 
 	// Allocate a BSTR containing a copy of the string
 	BSTR AllocSysString() const
 	{
-		BSTR bstrResult = StringTraits::AllocSysString( GetString(), GetLength() );
-
-#pragma warning(push)
-#pragma warning(disable:4068)
-#pragma prefast(push)
-#pragma prefast(disable:325, "We are deliberately checking if this has already been allocated")
+		BSTR bstrResult = StringTraits::AllocSysString( GetString(), 
+			GetLength() );
 		if( bstrResult == NULL )
 		{
 			ThrowMemoryException();
 		}
-#pragma prefast(pop)
-#pragma warning(pop)
 
 		return( bstrResult );
 	}
 
-	BSTR SetSysString( __out BSTR* pbstr ) const
+	BSTR SetSysString( BSTR* pbstr ) const
 	{
 		ATLASSERT( AtlIsValidAddress( pbstr, sizeof( BSTR ) ) );
 
@@ -2208,19 +1939,12 @@
 			ThrowMemoryException();
 		}
 
-#pragma warning(push)
-#pragma warning(disable:4068)
-#pragma prefast(push)
-#pragma prefast(disable:325, "We are deliberately checking if this has already been allocated")
 		ATLASSERT( *pbstr != NULL );
-#pragma prefast(pop)
-#pragma warning(pop)
-
-        return( *pbstr );
+		return( *pbstr );
 	}
 
 	// Set the string to the value of environment variable 'pszVar'
-	__checkReturn BOOL GetEnvironmentVariable( __in PCXSTR pszVar )
+	BOOL GetEnvironmentVariable( PCXSTR pszVar )
 	{
 		ULONG nLength = StringTraits::GetEnvironmentVariable( pszVar, NULL, 0 );
 		BOOL bRetVal = FALSE;
@@ -2241,7 +1965,7 @@
 	}
 
 	// Load the string from resource 'nID'
-	__checkReturn BOOL LoadString( __in UINT nID )
+	BOOL LoadString( UINT nID )
 	{
 		HINSTANCE hInst = StringTraits::FindStringResourceInstance( nID );
 		if( hInst == NULL )
@@ -2253,7 +1977,7 @@
 	}
 
 	// Load the string from resource 'nID' in module 'hInstance'
-	__checkReturn BOOL LoadString( __in HINSTANCE hInstance, __in UINT nID )
+	BOOL LoadString( HINSTANCE hInstance, UINT nID )
 	{
 		const ATLSTRINGRESOURCEIMAGE* pImage = AtlGetStringResourceImage( hInstance, nID );
 		if( pImage == NULL )
@@ -2270,7 +1994,7 @@
 	}
 
 	// Load the string from resource 'nID' in module 'hInstance', using language 'wLanguageID'
-	__checkReturn BOOL LoadString( __in HINSTANCE hInstance, __in UINT nID, __in WORD wLanguageID )
+	BOOL LoadString( HINSTANCE hInstance, UINT nID, WORD wLanguageID )
 	{
 		const ATLSTRINGRESOURCEIMAGE* pImage = AtlGetStringResourceImage( hInstance, nID, wLanguageID );
 		if( pImage == NULL )
@@ -2286,7 +2010,7 @@
 		return( TRUE );
 	}
 
-	friend CStringT operator+( __in const CStringT& str1, __in const CStringT& str2 )
+	friend CStringT operator+( const CStringT& str1, const CStringT& str2 )
 	{
 		CStringT strResult( str1.GetManager() );
 
@@ -2295,7 +2019,7 @@
 		return( strResult );
 	}
 
-	friend CStringT operator+( __in const CStringT& str1, __in PCXSTR psz2 )
+	friend CStringT operator+( const CStringT& str1, PCXSTR psz2 )
 	{
 		CStringT strResult( str1.GetManager() );
 
@@ -2304,7 +2028,7 @@
 		return( strResult );
 	}
 
-	friend CStringT operator+( __in PCXSTR psz1, __in const CStringT& str2 )
+	friend CStringT operator+( PCXSTR psz1, const CStringT& str2 )
 	{
 		CStringT strResult( str2.GetManager() );
 
@@ -2313,7 +2037,7 @@
 		return( strResult );
 	}
 
-	friend CStringT operator+( __in const CStringT& str1, __in wchar_t ch2 )
+	friend CStringT operator+( const CStringT& str1, wchar_t ch2 )
 	{
 		CStringT strResult( str1.GetManager() );
 		XCHAR chTemp = XCHAR( ch2 );
@@ -2323,7 +2047,7 @@
 		return( strResult );
 	}
 
-	friend CStringT operator+( __in const CStringT& str1, __in char ch2 )
+	friend CStringT operator+( const CStringT& str1, char ch2 )
 	{
 		CStringT strResult( str1.GetManager() );
 		XCHAR chTemp = XCHAR( ch2 );
@@ -2333,7 +2057,7 @@
 		return( strResult );
 	}
 
-	friend CStringT operator+( __in wchar_t ch1, __in const CStringT& str2 )
+	friend CStringT operator+( wchar_t ch1, const CStringT& str2 )
 	{
 		CStringT strResult( str2.GetManager() );
 		XCHAR chTemp = XCHAR( ch1 );
@@ -2343,7 +2067,7 @@
 		return( strResult );
 	}
 
-	friend CStringT operator+( __in char ch1, __in const CStringT& str2 )
+	friend CStringT operator+( char ch1, const CStringT& str2 )
 	{
 		CStringT strResult( str2.GetManager() );
 		XCHAR chTemp = XCHAR( ch1 );
@@ -2353,25 +2077,25 @@
 		return( strResult );
 	}
 
-	friend bool operator==( __in const CStringT& str1, __in const CStringT& str2 ) throw()
+	friend bool operator==( const CStringT& str1, const CStringT& str2 ) throw()
 	{
 		return( str1.Compare( str2 ) == 0 );
 	}
 
 	friend bool operator==(
-		__in const CStringT& str1, __in PCXSTR psz2 ) throw()
+		const CStringT& str1, PCXSTR psz2 ) throw()
 	{
 		return( str1.Compare( psz2 ) == 0 );
 	}
 
 	friend bool operator==(
-		__in PCXSTR psz1, __in const CStringT& str2 ) throw()
+		PCXSTR psz1, const CStringT& str2 ) throw()
 	{
 		return( str2.Compare( psz1 ) == 0 );
 	}
 
 	friend bool operator==(
-		__in const CStringT& str1, __in PCYSTR psz2 ) throw( ... )
+		const CStringT& str1, PCYSTR psz2 ) throw( ... )
 	{
 		CStringT str2( psz2, str1.GetManager() );
 
@@ -2379,7 +2103,7 @@
 	}
 
 	friend bool operator==(
-		__in PCYSTR psz1, __in const CStringT& str2 ) throw( ... )
+		PCYSTR psz1, const CStringT& str2 ) throw( ... )
 	{
 		CStringT str1( psz1, str2.GetManager() );
 
@@ -2387,25 +2111,25 @@
 	}
 
 	friend bool operator!=(
-		__in const CStringT& str1, __in const CStringT& str2 ) throw()
+		const CStringT& str1, const CStringT& str2 ) throw()
 	{
 		return( str1.Compare( str2 ) != 0 );
 	}
 
 	friend bool operator!=(
-		__in const CStringT& str1, __in PCXSTR psz2 ) throw()
+		const CStringT& str1, PCXSTR psz2 ) throw()
 	{
 		return( str1.Compare( psz2 ) != 0 );
 	}
 
 	friend bool operator!=(
-		__in PCXSTR psz1, __in const CStringT& str2 ) throw()
+		PCXSTR psz1, const CStringT& str2 ) throw()
 	{
 		return( str2.Compare( psz1 ) != 0 );
 	}
 
 	friend bool operator!=(
-		__in const CStringT& str1, __in PCYSTR psz2 ) throw( ... )
+		const CStringT& str1, PCYSTR psz2 ) throw( ... )
 	{
 		CStringT str2( psz2, str1.GetManager() );
 
@@ -2413,95 +2137,95 @@
 	}
 
 	friend bool operator!=(
-		__in PCYSTR psz1, __in const CStringT& str2 ) throw( ... )
+		PCYSTR psz1, const CStringT& str2 ) throw( ... )
 	{
 		CStringT str1( psz1, str2.GetManager() );
 
 		return( str1 != str2 );
 	}
 
-	friend bool operator<( __in const CStringT& str1, __in const CStringT& str2 ) throw()
+	friend bool operator<( const CStringT& str1, const CStringT& str2 ) throw()
 	{
 		return( str1.Compare( str2 ) < 0 );
 	}
 
-	friend bool operator<( __in const CStringT& str1, __in PCXSTR psz2 ) throw()
+	friend bool operator<( const CStringT& str1, PCXSTR psz2 ) throw()
 	{
 		return( str1.Compare( psz2 ) < 0 );
 	}
 
-	friend bool operator<( __in PCXSTR psz1, __in const CStringT& str2 ) throw()
+	friend bool operator<( PCXSTR psz1, const CStringT& str2 ) throw()
 	{
 		return( str2.Compare( psz1 ) > 0 );
 	}
 
-	friend bool operator>( __in const CStringT& str1, __in const CStringT& str2 ) throw()
+	friend bool operator>( const CStringT& str1, const CStringT& str2 ) throw()
 	{
 		return( str1.Compare( str2 ) > 0 );
 	}
 
-	friend bool operator>( __in const CStringT& str1, __in PCXSTR psz2 ) throw()
+	friend bool operator>( const CStringT& str1, PCXSTR psz2 ) throw()
 	{
 		return( str1.Compare( psz2 ) > 0 );
 	}
 
-	friend bool operator>( __in PCXSTR psz1, __in const CStringT& str2 ) throw()
+	friend bool operator>( PCXSTR psz1, const CStringT& str2 ) throw()
 	{
 		return( str2.Compare( psz1 ) < 0 );
 	}
 
-	friend bool operator<=( __in const CStringT& str1, __in const CStringT& str2 ) throw()
+	friend bool operator<=( const CStringT& str1, const CStringT& str2 ) throw()
 	{
 		return( str1.Compare( str2 ) <= 0 );
 	}
 
-	friend bool operator<=( __in const CStringT& str1, __in PCXSTR psz2 ) throw()
+	friend bool operator<=( const CStringT& str1, PCXSTR psz2 ) throw()
 	{
 		return( str1.Compare( psz2 ) <= 0 );
 	}
 
-	friend bool operator<=( __in PCXSTR psz1, __in const CStringT& str2 ) throw()
+	friend bool operator<=( PCXSTR psz1, const CStringT& str2 ) throw()
 	{
 		return( str2.Compare( psz1 ) >= 0 );
 	}
 
-	friend bool operator>=( __in const CStringT& str1, __in const CStringT& str2 ) throw()
+	friend bool operator>=( const CStringT& str1, const CStringT& str2 ) throw()
 	{
 		return( str1.Compare( str2 ) >= 0 );
 	}
 
-	friend bool operator>=( __in const CStringT& str1, __in PCXSTR psz2 ) throw()
+	friend bool operator>=( const CStringT& str1, PCXSTR psz2 ) throw()
 	{
 		return( str1.Compare( psz2 ) >= 0 );
 	}
 
-	friend bool operator>=( __in PCXSTR psz1, __in const CStringT& str2 ) throw()
+	friend bool operator>=( PCXSTR psz1, const CStringT& str2 ) throw()
 	{
 		return( str2.Compare( psz1 ) <= 0 );
 	}
 
-	friend bool operator==( __in XCHAR ch1, __in const CStringT& str2 ) throw()
+	friend bool operator==( XCHAR ch1, const CStringT& str2 ) throw()
 	{
 		return( (str2.GetLength() == 1) && (str2[0] == ch1) );
 	}
 
-	friend bool operator==( __in const CStringT& str1, __in XCHAR ch2 ) throw()
+	friend bool operator==( const CStringT& str1, XCHAR ch2 ) throw()
 	{
 		return( (str1.GetLength() == 1) && (str1[0] == ch2) );
 	}
 
-	friend bool operator!=( __in XCHAR ch1, __in const CStringT& str2 ) throw()
+	friend bool operator!=( XCHAR ch1, const CStringT& str2 ) throw()
 	{
 		return( (str2.GetLength() != 1) || (str2[0] != ch1) );
 	}
 
-	friend bool operator!=( __in const CStringT& str1, __in XCHAR ch2 ) throw()
+	friend bool operator!=( const CStringT& str1, XCHAR ch2 ) throw()
 	{
 		return( (str1.GetLength() != 1) || (str1[0] != ch2) );
 	}
 
 private:
-	bool CheckImplicitLoad( __in_opt const void* pv )
+	bool CheckImplicitLoad( const void* pv )
 	{
 		bool bRet = false;
 
@@ -2520,139 +2244,6 @@
 
 };
 
-#ifndef _CSTRING_BUFFER_SIZE
-#define _CSTRING_BUFFER_SIZE(_CStringObj) ((_CStringObj).GetAllocLength() + 1)
-#endif
-
-#pragma warning(push)
-#pragma warning(disable : 4793)
-// Format data using format string 'pszFormat'
-template< typename BaseType, class StringTraits >
-inline void __cdecl CStringT<BaseType, StringTraits>::Format( __in __format_string PCXSTR pszFormat, ... )
-{
-	ATLASSERT( AtlIsValidString( pszFormat ) );
-
-	va_list argList;
-	va_start( argList, pszFormat );
-	FormatV( pszFormat, argList );
-	va_end( argList );
-}
-
-// Format data using format string loaded from resource 'nFormatID'
-template< typename BaseType, class StringTraits >
-inline void __cdecl CStringT<BaseType, StringTraits>::Format( __format_string UINT nFormatID, ... )
-{
-	CStringT strFormat( GetManager() );
-	ATLVERIFY( strFormat.LoadString( nFormatID ) );
-
-	va_list argList;
-	va_start( argList, nFormatID );
-	FormatV( strFormat, argList );
-	va_end( argList );
-}
-
-// Append formatted data using format string loaded from resource 'nFormatID'
-template< typename BaseType, class StringTraits >
-inline void __cdecl CStringT<BaseType, StringTraits>::AppendFormat( __in UINT nFormatID, ... )
-{
-	va_list argList;
-	va_start( argList, nFormatID );
-
-	CStringT strFormat( GetManager() );
-	ATLVERIFY( strFormat.LoadString( nFormatID ) ); 
-
-	AppendFormatV( strFormat, argList );
-
-	va_end( argList );
-}
-
-
-// Append formatted data using format string 'pszFormat'
-template< typename BaseType, class StringTraits >
-inline void __cdecl CStringT<BaseType, StringTraits>::AppendFormat( __in __format_string PCXSTR pszFormat, ... )
-{
-	ATLASSERT( AtlIsValidString( pszFormat ) );
-
-	va_list argList;
-	va_start( argList, pszFormat );
-
-	AppendFormatV( pszFormat, argList );
-
-	va_end( argList );
-}
-
-// Format a message using format string 'pszFormat'
-template< typename BaseType, class StringTraits >
-inline void __cdecl CStringT<BaseType, StringTraits>::_AFX_FUNCNAME(FormatMessage)( __in __format_string PCXSTR pszFormat, ... )
-{
-	if(pszFormat == NULL)
-		AtlThrow(E_INVALIDARG);
-
-	va_list argList;
-	va_start( argList, pszFormat );
-
-	FormatMessageV( pszFormat, &argList );
-
-	va_end( argList );
-}
-
-#if defined(_AFX)
-template< typename BaseType, class StringTraits >
-inline void __cdecl CStringT<BaseType, StringTraits>::FormatMessage( __in __format_string PCXSTR pszFormat, ... )
-{
-	if(pszFormat == NULL)
-		AtlThrow(E_INVALIDARG);
-
-	va_list argList;
-	va_start( argList, pszFormat );
-
-	FormatMessageV( pszFormat, &argList );
-
-	va_end( argList );
-}
-#endif
-
-// Format a message using format string loaded from resource 'nFormatID'
-template< typename BaseType, class StringTraits >
-inline void __cdecl CStringT<BaseType, StringTraits>::_AFX_FUNCNAME(FormatMessage)( __in UINT nFormatID, ... )
-{
-	// get format string from string table
-	CStringT strFormat( GetManager() );
-	ATLVERIFY( strFormat.LoadString( nFormatID ) );
-
-	if(strFormat.GetLength() == 0)
-		AtlThrow(E_INVALIDARG);
-
-	va_list argList;
-	va_start( argList, nFormatID );
-
-	FormatMessageV( strFormat, &argList );
-
-	va_end( argList );
-}
-
-#if defined(_AFX)
-template< typename BaseType, class StringTraits >
-inline void __cdecl CStringT<BaseType, StringTraits>::FormatMessage( __in UINT nFormatID, ... )
-{
-	// get format string from string table
-	CStringT strFormat( GetManager() );
-	ATLVERIFY( strFormat.LoadString( nFormatID ) );
-
-	if(strFormat.GetLength() == 0)
-		AtlThrow(E_INVALIDARG);
-
-	va_list argList;
-	va_start( argList, nFormatID );
-
-	FormatMessageV( strFormat, &argList );
-
-	va_end( argList );
-}
-#endif
-
-#pragma warning( pop )
-
 class IFixedStringLog
 {
 public:
@@ -2664,7 +2255,7 @@
 	public IAtlStringMgr
 {
 public:
-	CFixedStringMgr( __in CStringData* pData, __in int nChars, __in_opt IAtlStringMgr* pMgr = NULL ) throw() :
+	CFixedStringMgr( CStringData* pData, int nChars, IAtlStringMgr* pMgr = NULL ) throw() :
 		m_pData( pData ),
 		m_pMgr( pMgr )
 	{
@@ -2680,11 +2271,11 @@
 
 // IAtlStringMgr
 public:
-	virtual CStringData* Allocate( __in int nChars, __in int nCharSize ) throw()
+	virtual CStringData* Allocate( int nChars, int nCharSize ) throw()
 	{
-		ATLASSUME( m_pData->nRefs == -1 );
-		ATLASSUME( m_pData->nDataLength == 0 );
-		if( m_pData->nAllocLength >= 0 && m_pData->nAllocLength < nChars )
+		ATLASSERT( m_pData->nRefs == -1 );
+		ATLASSERT( m_pData->nDataLength == 0 );
+		if( nChars > m_pData->nAllocLength )
 		{
 			if( s_pLog != NULL )
 			{
@@ -2706,7 +2297,7 @@
 
 		return m_pData;
 	}
-	virtual void Free( __inout CStringData* pData ) throw()
+	virtual void Free( CStringData* pData ) throw()
 	{
 		ATLASSERT( pData->nRefs <= 0 );
 		if( pData != m_pData )
@@ -2721,7 +2312,7 @@
 		m_pData->nDataLength = 0;
 		*static_cast< wchar_t* >( m_pData->data() ) = 0;
 	}
-	virtual CStringData* Reallocate( __inout CStringData* pData, __in int nChars, __in int nCharSize ) throw()
+	virtual CStringData* Reallocate( CStringData* pData, int nChars, int nCharSize ) throw()
 	{
 		CStringData* pNewData;
 
@@ -2741,10 +2332,8 @@
 		}
 		else
 		{
-			if( pData->nAllocLength >= 0 && pData->nAllocLength < nChars )
+			if( nChars > pData->nAllocLength )
 			{
-                size_t CopySize = 0;
-
 				if( s_pLog != NULL )
 				{
 					s_pLog->OnReallocateSpill( nChars, pData->nAllocLength, pData );
@@ -2755,14 +2344,8 @@
 					return NULL;
 				}
 
-                if (FAILED(SizeTMult(nChars, nCharSize, &CopySize)))
-                {
-                    return NULL;
-                }
-
-				// Copy the string data 
-                Checked::memcpy_s( pNewData->data(), CopySize, 
-					pData->data(), (pData->nAllocLength+1)*nCharSize );
+				// Copy the string data
+				memcpy( pNewData->data(), pData->data(), (pData->nAllocLength+1)*nCharSize );
 				pNewData->nRefs = pData->nRefs;  // Locked
 				pNewData->pStringMgr = this;
 				pNewData->nDataLength = pData->nDataLength;
@@ -2778,8 +2361,8 @@
 	}
 	virtual CStringData* GetNilString() throw()
 	{
-		ATLASSUME( m_pData->nRefs == -1 );
-		ATLASSUME( m_pData->nDataLength == 0 );
+		ATLASSERT( m_pData->nRefs == -1 );
+		ATLASSERT( m_pData->nDataLength == 0 );
 
 		return m_pData;
 	}
@@ -2818,43 +2401,43 @@
 	{
 	}
 
-	explicit CFixedStringT( __in IAtlStringMgr* pStringMgr ) throw() :
+	explicit CFixedStringT( IAtlStringMgr* pStringMgr ) throw() :
 		CFixedStringMgr( &m_data, t_nChars, pStringMgr ),
 		StringType( static_cast< IAtlStringMgr* >( this ) )
 	{
 	}
 
-	CFixedStringT( __in const CFixedStringT< StringType, t_nChars >& str ) :
+	CFixedStringT( const CFixedStringT< StringType, t_nChars >& str ) :
 		CFixedStringMgr( &m_data, t_nChars, StrTraits::GetDefaultManager() ),
 		StringType( str.GetString(), str.GetLength(), static_cast< CFixedStringMgr* >( this ) )
 	{
 	}
 
-	CFixedStringT( __in const StringType& str ) :
+	CFixedStringT( const StringType& str ) :
 		CFixedStringMgr( &m_data, t_nChars, StrTraits::GetDefaultManager() ),
 		StringType( str.GetString(), str.GetLength(), static_cast< CFixedStringMgr* >( this ) )
 	{
 	}
 
-	CFixedStringT( __in const typename StringType::XCHAR* psz ) :
+	CFixedStringT( const typename StringType::XCHAR* psz ) :
 		CFixedStringMgr( &m_data, t_nChars, StrTraits::GetDefaultManager() ),
 		StringType( psz, static_cast< CFixedStringMgr* >( this ) )
 	{
 	}
 
-	CFixedStringT( __in_ecount(nLength) const typename StringType::XCHAR* psz, __in int nLength ) :
+	CFixedStringT( const typename StringType::XCHAR* psz, int nLength ) :
 		CFixedStringMgr( &m_data, t_nChars, StrTraits::GetDefaultManager() ),
 		StringType( psz, nLength, static_cast< CFixedStringMgr* >( this ) )
 	{
 	}
 
-	explicit CFixedStringT( __in const typename StringType::YCHAR* psz ) :
+	explicit CFixedStringT( const typename StringType::YCHAR* psz ) :
 		CFixedStringMgr( &m_data, t_nChars, StrTraits::GetDefaultManager() ),
 		StringType( psz, static_cast< CFixedStringMgr* >( this ) )
 	{
 	}
 
-	explicit CFixedStringT( __in const unsigned char* psz ) :
+	explicit CFixedStringT( const unsigned char* psz ) :
 		CFixedStringMgr( &m_data, t_nChars, StrTraits::GetDefaultManager() ),
 		StringType( psz, static_cast< CFixedStringMgr* >( this ) )
 	{
@@ -2865,31 +2448,31 @@
 		Empty();
 	}
 
-	CFixedStringT< StringType, t_nChars >& operator=( __in const CFixedStringT< StringType, t_nChars >& str )
+	CFixedStringT< StringType, t_nChars >& operator=( const CFixedStringT< StringType, t_nChars >& str )
 	{
 		StringType::operator=( str );
 		return *this;
 	}
 
-	CFixedStringT< StringType, t_nChars >& operator=( __in_z const char* psz )
+	CFixedStringT< StringType, t_nChars >& operator=( const char* psz )
 	{
 		StringType::operator=( psz );
 		return *this;
 	}
 
-	CFixedStringT< StringType, t_nChars >& operator=( __in_z const wchar_t* psz )
+	CFixedStringT< StringType, t_nChars >& operator=( const wchar_t* psz )
 	{
 		StringType::operator=( psz );
 		return *this;
 	}
 
-	CFixedStringT< StringType, t_nChars >& operator=( __in_z const unsigned char* psz )
+	CFixedStringT< StringType, t_nChars >& operator=( const unsigned char* psz )
 	{
 		StringType::operator=( psz );
 		return *this;
 	}
 
-	CFixedStringT< StringType, t_nChars >& operator=( __in const StringType& str )
+	CFixedStringT< StringType, t_nChars >& operator=( const StringType& str )
 	{
 		StringType::operator=( str );
 		return *this;
@@ -2916,14 +2499,14 @@
 	}
 
 public:
-	void OnAllocateSpill( __in int nActualChars, __in int nFixedChars, __in const CStringData* pData ) throw()
+	void OnAllocateSpill( int nActualChars, int nFixedChars, const CStringData* pData ) throw()
 	{
 		(void)nActualChars;
 		(void)nFixedChars;
 		(void)pData;
 		ATLTRACE( atlTraceString, 0, _T( "CFixedStringMgr::Allocate() spilling to heap.  %d chars (fixed size = %d chars)\n" ), nActualChars, nFixedChars );
 	}
-	void OnReallocateSpill( __in int nActualChars, __in int nFixedChars, __in const CStringData* pData ) throw()
+	void OnReallocateSpill( int nActualChars, int nFixedChars, const CStringData* pData ) throw()
 	{
 		(void)nActualChars;
 		(void)nFixedChars;
@@ -2939,7 +2522,7 @@
 	typedef typename T::PCXSTR INARGTYPE;
 	typedef T& OUTARGTYPE;
 
-	static void __cdecl CopyElements( __out_ecount_full(nElements) T* pDest, const __in_ecount(nElements) T* pSrc, __in size_t nElements )
+	static void __cdecl CopyElements( T* pDest, const T* pSrc, size_t nElements )
 	{
 		for( size_t iElement = 0; iElement < nElements; iElement++ )
 		{
@@ -2947,14 +2530,14 @@
 		}
 	}
 
-	static void __cdecl RelocateElements( __out_ecount_full(nElements) T* pDest, __in_ecount(nElements) T* pSrc, __in size_t nElements )
+	static void __cdecl RelocateElements( T* pDest, T* pSrc, size_t nElements )
 	{
-		Checked::memmove_s( pDest, nElements*sizeof( T ), pSrc, nElements*sizeof( T ) );
+		memmove( pDest, pSrc, nElements*sizeof( T ) );
 	}
 
-	static ULONG __cdecl Hash( __in INARGTYPE str )
+	static ULONG __cdecl Hash( INARGTYPE str )
 	{
-		ATLENSURE( str != NULL );
+		ATLASSERT( str != NULL );
 		ULONG nHash = 0;
 		const T::XCHAR* pch = str;
 		while( *pch != 0 )
@@ -2966,12 +2549,12 @@
 		return( nHash );
 	}
 
-	static bool __cdecl CompareElements( __in INARGTYPE str1, __in INARGTYPE str2 )
+	static bool __cdecl CompareElements( INARGTYPE str1, INARGTYPE str2 )
 	{
 		return( T::StrTraits::StringCompare( str1, str2 ) == 0 );
 	}
 
-	static int __cdecl CompareElementsOrdered( __in INARGTYPE str1, __in INARGTYPE str2 )
+	static int __cdecl CompareElementsOrdered( INARGTYPE str1, INARGTYPE str2 )
 	{
 		return( T::StrTraits::StringCompare( str1, str2 ) );
 	}
@@ -2979,24 +2562,14 @@
 
 #pragma pop_macro("new")
 
-#if defined(_AFX)
-#pragma pop_macro("FormatMessage")
-#endif
-
 };  // namespace ATL
 
-
-
 #ifdef __ATLCOMCLI_H__
 #include <cstringt.inl>
 #endif	// __ATLCOMCLI_H__
 
-
 #ifndef _ATL_NO_PRAGMA_WARNINGS
 #pragma warning (pop)
 #endif
 
-
-
 #endif	// __CSTRINGT_H__ (whole file)
-
diff -Naur a/WinDDK/7600.16385.1/inc/mfc42/afx.h b/WinDDK/7600.16385.1/inc/mfc42/afx.h
--- a/WinDDK/7600.16385.1/inc/mfc42/afx.h	Thu Aug 28 12:16:55 2014
+++ b/WinDDK/7600.16385.1/inc/mfc42/afx.h	Thu Aug 28 12:26:19 2014
@@ -265,13 +265,13 @@
 // Debug ASSERTs then throws. Retail throws if condition not met
 #define ENSURE_THROW(cond, exception)	\
 	do { ASSERT(cond); if (!(cond)){exception;} } while (false)
-#define ENSURE(cond)		ENSURE_THROW(cond, ::AfxThrowInvalidArgException() )
-#define ENSURE_ARG(cond)	ENSURE_THROW(cond, ::AfxThrowInvalidArgException() )
+#define ENSURE(cond)		ENSURE_THROW(cond, /*::AfxThrowInvalidArgException()*/ )
+#define ENSURE_ARG(cond)	ENSURE_THROW(cond, /*::AfxThrowInvalidArgException()*/ )
 
 // Debug ASSERT_VALIDs then throws. Retail throws if pOb is NULL
 #define ENSURE_VALID_THROW(pOb, exception)	\
 	do { ASSERT_VALID(pOb); if (!(pOb)){exception;} } while (false)
-#define ENSURE_VALID(pOb)	ENSURE_VALID_THROW(pOb, ::AfxThrowInvalidArgException() )
+#define ENSURE_VALID(pOb)	ENSURE_VALID_THROW(pOb, /*::AfxThrowInvalidArgException()*/ )
 
 #define ENSURE_RETURN_HR(cond, hr)          	   \
 	do { ASSERT(cond); if (!(cond)){return hr;} } while (false)
diff -Naur a/WinDDK/7600.16385.1/inc/mfc42/afx.inl b/WinDDK/7600.16385.1/inc/mfc42/afx.inl
--- a/WinDDK/7600.16385.1/inc/mfc42/afx.inl	Thu Aug 28 12:16:55 2014
+++ b/WinDDK/7600.16385.1/inc/mfc42/afx.inl	Thu Aug 28 12:26:19 2014
@@ -271,17 +271,17 @@
 _AFX_INLINE const CTimeSpan& CTimeSpan::operator=(const CTimeSpan& timeSpanSrc)
 	{ m_timeSpan = timeSpanSrc.m_timeSpan; return *this; }
 _AFX_INLINE LONG_PTR CTimeSpan::GetDays() const
-	{ return m_timeSpan / (24*3600L); }
+	{ return (LONG_PTR)m_timeSpan / (24*3600L); }
 _AFX_INLINE LONG_PTR CTimeSpan::GetTotalHours() const
-	{ return m_timeSpan/3600; }
+	{ return (LONG_PTR)m_timeSpan/3600; }
 _AFX_INLINE int CTimeSpan::GetHours() const
 	{ return (int)(GetTotalHours() - GetDays()*24); }
 _AFX_INLINE LONG_PTR CTimeSpan::GetTotalMinutes() const
-	{ return m_timeSpan/60; }
+	{ return (LONG_PTR)m_timeSpan/60; }
 _AFX_INLINE int CTimeSpan::GetMinutes() const
 	{ return (int)(GetTotalMinutes() - GetTotalHours()*60); }
 _AFX_INLINE LONG_PTR CTimeSpan::GetTotalSeconds() const
-	{ return m_timeSpan; }
+	{ return (LONG_PTR)m_timeSpan; }
 _AFX_INLINE int CTimeSpan::GetSeconds() const
 	{ return (int)(GetTotalSeconds() - GetTotalMinutes()*60); }
 _AFX_INLINE CTimeSpan CTimeSpan::operator-(CTimeSpan timeSpan) const
diff -Naur a/WinDDK/7600.16385.1/inc/mfc42/afxdisp.h b/WinDDK/7600.16385.1/inc/mfc42/afxdisp.h
--- a/WinDDK/7600.16385.1/inc/mfc42/afxdisp.h	Thu Aug 28 12:16:55 2014
+++ b/WinDDK/7600.16385.1/inc/mfc42/afxdisp.h	Thu Aug 28 12:26:19 2014
@@ -576,8 +576,8 @@
 	virtual CCmdTarget* OnCreateObject();
 	virtual BOOL UpdateRegistry(BOOL bRegister);
 	virtual BOOL VerifyUserLicense();
-	virtual BOOL GetLicenseKey(DWORD dwReserved, BSTR* pbstrKey);
-	virtual BOOL VerifyLicenseKey(BSTR bstrKey);
+	//virtual BOOL GetLicenseKey(DWORD dwReserved, BSTR* pbstrKey);
+	//virtual BOOL VerifyLicenseKey(BSTR bstrKey);
 
 // Implementation
 public:
diff -Naur a/WinDDK/7600.16385.1/inc/mfc42/atlconv.h b/WinDDK/7600.16385.1/inc/mfc42/atlconv.h
--- a/WinDDK/7600.16385.1/inc/mfc42/atlconv.h	Thu Aug 28 12:16:55 2014
+++ b/WinDDK/7600.16385.1/inc/mfc42/atlconv.h	Thu Aug 28 12:26:19 2014
@@ -4,7 +4,7 @@
 	AtlCrtErrorCheck(expr)
        
 #else
-#include "..\atl30\atlconv.h"
+#include "..\atl71\atlconv.h"
 #define _ATL_NO_CONVERSIONS
 #endif
 
diff -Naur a/WinDDK/7600.16385.1/inc/mfc42/atldef.h b/WinDDK/7600.16385.1/inc/mfc42/atldef.h
--- a/WinDDK/7600.16385.1/inc/mfc42/atldef.h	Thu Aug 28 12:16:55 2014
+++ b/WinDDK/7600.16385.1/inc/mfc42/atldef.h	Thu Aug 28 12:26:19 2014
@@ -1,6 +1,6 @@
 #if defined(USE_MFC6_WITH_ATL7)
 #include "..\atlmfc\atldef.h"
 #else
-#include "..\atl30\atldef.h"
+#include "..\atl71\atldef.h"
 #endif
 
